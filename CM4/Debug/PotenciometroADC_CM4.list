
PotenciometroADC_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002af0  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08002c28  08002c28  00012c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cc4  08002cc4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002cc4  08002cc4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cc4  08002cc4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cc4  08002cc4  00012cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cc8  08002cc8  00012cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ccc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000000c  08002cd8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08002cd8  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008c3d  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019ea  00000000  00000000  00028cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be8  00000000  00000000  0002a6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008d5  00000000  00000000  0002b288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b6b1  00000000  00000000  0002bb5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009634  00000000  00000000  0004720e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000afb28  00000000  00000000  00050842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003124  00000000  00000000  0010036c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00103490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	08002c10 	.word	0x08002c10

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	08002c10 	.word	0x08002c10

08000178 <__aeabi_frsub>:
 8000178:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800017c:	e002      	b.n	8000184 <__addsf3>
 800017e:	bf00      	nop

08000180 <__aeabi_fsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000184 <__addsf3>:
 8000184:	0042      	lsls	r2, r0, #1
 8000186:	bf1f      	itttt	ne
 8000188:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800018c:	ea92 0f03 	teqne	r2, r3
 8000190:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000194:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000198:	d06a      	beq.n	8000270 <__addsf3+0xec>
 800019a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800019e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001a2:	bfc1      	itttt	gt
 80001a4:	18d2      	addgt	r2, r2, r3
 80001a6:	4041      	eorgt	r1, r0
 80001a8:	4048      	eorgt	r0, r1
 80001aa:	4041      	eorgt	r1, r0
 80001ac:	bfb8      	it	lt
 80001ae:	425b      	neglt	r3, r3
 80001b0:	2b19      	cmp	r3, #25
 80001b2:	bf88      	it	hi
 80001b4:	4770      	bxhi	lr
 80001b6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001c2:	bf18      	it	ne
 80001c4:	4240      	negne	r0, r0
 80001c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001ce:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001d2:	bf18      	it	ne
 80001d4:	4249      	negne	r1, r1
 80001d6:	ea92 0f03 	teq	r2, r3
 80001da:	d03f      	beq.n	800025c <__addsf3+0xd8>
 80001dc:	f1a2 0201 	sub.w	r2, r2, #1
 80001e0:	fa41 fc03 	asr.w	ip, r1, r3
 80001e4:	eb10 000c 	adds.w	r0, r0, ip
 80001e8:	f1c3 0320 	rsb	r3, r3, #32
 80001ec:	fa01 f103 	lsl.w	r1, r1, r3
 80001f0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001f4:	d502      	bpl.n	80001fc <__addsf3+0x78>
 80001f6:	4249      	negs	r1, r1
 80001f8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001fc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000200:	d313      	bcc.n	800022a <__addsf3+0xa6>
 8000202:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000206:	d306      	bcc.n	8000216 <__addsf3+0x92>
 8000208:	0840      	lsrs	r0, r0, #1
 800020a:	ea4f 0131 	mov.w	r1, r1, rrx
 800020e:	f102 0201 	add.w	r2, r2, #1
 8000212:	2afe      	cmp	r2, #254	; 0xfe
 8000214:	d251      	bcs.n	80002ba <__addsf3+0x136>
 8000216:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800021a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800021e:	bf08      	it	eq
 8000220:	f020 0001 	biceq.w	r0, r0, #1
 8000224:	ea40 0003 	orr.w	r0, r0, r3
 8000228:	4770      	bx	lr
 800022a:	0049      	lsls	r1, r1, #1
 800022c:	eb40 0000 	adc.w	r0, r0, r0
 8000230:	3a01      	subs	r2, #1
 8000232:	bf28      	it	cs
 8000234:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000238:	d2ed      	bcs.n	8000216 <__addsf3+0x92>
 800023a:	fab0 fc80 	clz	ip, r0
 800023e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000242:	ebb2 020c 	subs.w	r2, r2, ip
 8000246:	fa00 f00c 	lsl.w	r0, r0, ip
 800024a:	bfaa      	itet	ge
 800024c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000250:	4252      	neglt	r2, r2
 8000252:	4318      	orrge	r0, r3
 8000254:	bfbc      	itt	lt
 8000256:	40d0      	lsrlt	r0, r2
 8000258:	4318      	orrlt	r0, r3
 800025a:	4770      	bx	lr
 800025c:	f092 0f00 	teq	r2, #0
 8000260:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000264:	bf06      	itte	eq
 8000266:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800026a:	3201      	addeq	r2, #1
 800026c:	3b01      	subne	r3, #1
 800026e:	e7b5      	b.n	80001dc <__addsf3+0x58>
 8000270:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000274:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000278:	bf18      	it	ne
 800027a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800027e:	d021      	beq.n	80002c4 <__addsf3+0x140>
 8000280:	ea92 0f03 	teq	r2, r3
 8000284:	d004      	beq.n	8000290 <__addsf3+0x10c>
 8000286:	f092 0f00 	teq	r2, #0
 800028a:	bf08      	it	eq
 800028c:	4608      	moveq	r0, r1
 800028e:	4770      	bx	lr
 8000290:	ea90 0f01 	teq	r0, r1
 8000294:	bf1c      	itt	ne
 8000296:	2000      	movne	r0, #0
 8000298:	4770      	bxne	lr
 800029a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800029e:	d104      	bne.n	80002aa <__addsf3+0x126>
 80002a0:	0040      	lsls	r0, r0, #1
 80002a2:	bf28      	it	cs
 80002a4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002a8:	4770      	bx	lr
 80002aa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002ae:	bf3c      	itt	cc
 80002b0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002b4:	4770      	bxcc	lr
 80002b6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002ba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c2:	4770      	bx	lr
 80002c4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c8:	bf16      	itet	ne
 80002ca:	4608      	movne	r0, r1
 80002cc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002d0:	4601      	movne	r1, r0
 80002d2:	0242      	lsls	r2, r0, #9
 80002d4:	bf06      	itte	eq
 80002d6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002da:	ea90 0f01 	teqeq	r0, r1
 80002de:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002e2:	4770      	bx	lr

080002e4 <__aeabi_ui2f>:
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e004      	b.n	80002f4 <__aeabi_i2f+0x8>
 80002ea:	bf00      	nop

080002ec <__aeabi_i2f>:
 80002ec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002f0:	bf48      	it	mi
 80002f2:	4240      	negmi	r0, r0
 80002f4:	ea5f 0c00 	movs.w	ip, r0
 80002f8:	bf08      	it	eq
 80002fa:	4770      	bxeq	lr
 80002fc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000300:	4601      	mov	r1, r0
 8000302:	f04f 0000 	mov.w	r0, #0
 8000306:	e01c      	b.n	8000342 <__aeabi_l2f+0x2a>

08000308 <__aeabi_ul2f>:
 8000308:	ea50 0201 	orrs.w	r2, r0, r1
 800030c:	bf08      	it	eq
 800030e:	4770      	bxeq	lr
 8000310:	f04f 0300 	mov.w	r3, #0
 8000314:	e00a      	b.n	800032c <__aeabi_l2f+0x14>
 8000316:	bf00      	nop

08000318 <__aeabi_l2f>:
 8000318:	ea50 0201 	orrs.w	r2, r0, r1
 800031c:	bf08      	it	eq
 800031e:	4770      	bxeq	lr
 8000320:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000324:	d502      	bpl.n	800032c <__aeabi_l2f+0x14>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	ea5f 0c01 	movs.w	ip, r1
 8000330:	bf02      	ittt	eq
 8000332:	4684      	moveq	ip, r0
 8000334:	4601      	moveq	r1, r0
 8000336:	2000      	moveq	r0, #0
 8000338:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800033c:	bf08      	it	eq
 800033e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000342:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000346:	fabc f28c 	clz	r2, ip
 800034a:	3a08      	subs	r2, #8
 800034c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000350:	db10      	blt.n	8000374 <__aeabi_l2f+0x5c>
 8000352:	fa01 fc02 	lsl.w	ip, r1, r2
 8000356:	4463      	add	r3, ip
 8000358:	fa00 fc02 	lsl.w	ip, r0, r2
 800035c:	f1c2 0220 	rsb	r2, r2, #32
 8000360:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000364:	fa20 f202 	lsr.w	r2, r0, r2
 8000368:	eb43 0002 	adc.w	r0, r3, r2
 800036c:	bf08      	it	eq
 800036e:	f020 0001 	biceq.w	r0, r0, #1
 8000372:	4770      	bx	lr
 8000374:	f102 0220 	add.w	r2, r2, #32
 8000378:	fa01 fc02 	lsl.w	ip, r1, r2
 800037c:	f1c2 0220 	rsb	r2, r2, #32
 8000380:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000384:	fa21 f202 	lsr.w	r2, r1, r2
 8000388:	eb43 0002 	adc.w	r0, r3, r2
 800038c:	bf08      	it	eq
 800038e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000392:	4770      	bx	lr

08000394 <__aeabi_fmul>:
 8000394:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000398:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800039c:	bf1e      	ittt	ne
 800039e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003a2:	ea92 0f0c 	teqne	r2, ip
 80003a6:	ea93 0f0c 	teqne	r3, ip
 80003aa:	d06f      	beq.n	800048c <__aeabi_fmul+0xf8>
 80003ac:	441a      	add	r2, r3
 80003ae:	ea80 0c01 	eor.w	ip, r0, r1
 80003b2:	0240      	lsls	r0, r0, #9
 80003b4:	bf18      	it	ne
 80003b6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003ba:	d01e      	beq.n	80003fa <__aeabi_fmul+0x66>
 80003bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003c0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003c4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c8:	fba0 3101 	umull	r3, r1, r0, r1
 80003cc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003d0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003d4:	bf3e      	ittt	cc
 80003d6:	0049      	lslcc	r1, r1, #1
 80003d8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003dc:	005b      	lslcc	r3, r3, #1
 80003de:	ea40 0001 	orr.w	r0, r0, r1
 80003e2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003e6:	2afd      	cmp	r2, #253	; 0xfd
 80003e8:	d81d      	bhi.n	8000426 <__aeabi_fmul+0x92>
 80003ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003f2:	bf08      	it	eq
 80003f4:	f020 0001 	biceq.w	r0, r0, #1
 80003f8:	4770      	bx	lr
 80003fa:	f090 0f00 	teq	r0, #0
 80003fe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000402:	bf08      	it	eq
 8000404:	0249      	lsleq	r1, r1, #9
 8000406:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800040a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800040e:	3a7f      	subs	r2, #127	; 0x7f
 8000410:	bfc2      	ittt	gt
 8000412:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000416:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800041a:	4770      	bxgt	lr
 800041c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	3a01      	subs	r2, #1
 8000426:	dc5d      	bgt.n	80004e4 <__aeabi_fmul+0x150>
 8000428:	f112 0f19 	cmn.w	r2, #25
 800042c:	bfdc      	itt	le
 800042e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000432:	4770      	bxle	lr
 8000434:	f1c2 0200 	rsb	r2, r2, #0
 8000438:	0041      	lsls	r1, r0, #1
 800043a:	fa21 f102 	lsr.w	r1, r1, r2
 800043e:	f1c2 0220 	rsb	r2, r2, #32
 8000442:	fa00 fc02 	lsl.w	ip, r0, r2
 8000446:	ea5f 0031 	movs.w	r0, r1, rrx
 800044a:	f140 0000 	adc.w	r0, r0, #0
 800044e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000452:	bf08      	it	eq
 8000454:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000458:	4770      	bx	lr
 800045a:	f092 0f00 	teq	r2, #0
 800045e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000462:	bf02      	ittt	eq
 8000464:	0040      	lsleq	r0, r0, #1
 8000466:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800046a:	3a01      	subeq	r2, #1
 800046c:	d0f9      	beq.n	8000462 <__aeabi_fmul+0xce>
 800046e:	ea40 000c 	orr.w	r0, r0, ip
 8000472:	f093 0f00 	teq	r3, #0
 8000476:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800047a:	bf02      	ittt	eq
 800047c:	0049      	lsleq	r1, r1, #1
 800047e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000482:	3b01      	subeq	r3, #1
 8000484:	d0f9      	beq.n	800047a <__aeabi_fmul+0xe6>
 8000486:	ea41 010c 	orr.w	r1, r1, ip
 800048a:	e78f      	b.n	80003ac <__aeabi_fmul+0x18>
 800048c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000490:	ea92 0f0c 	teq	r2, ip
 8000494:	bf18      	it	ne
 8000496:	ea93 0f0c 	teqne	r3, ip
 800049a:	d00a      	beq.n	80004b2 <__aeabi_fmul+0x11e>
 800049c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004a0:	bf18      	it	ne
 80004a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004a6:	d1d8      	bne.n	800045a <__aeabi_fmul+0xc6>
 80004a8:	ea80 0001 	eor.w	r0, r0, r1
 80004ac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004b0:	4770      	bx	lr
 80004b2:	f090 0f00 	teq	r0, #0
 80004b6:	bf17      	itett	ne
 80004b8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004bc:	4608      	moveq	r0, r1
 80004be:	f091 0f00 	teqne	r1, #0
 80004c2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004c6:	d014      	beq.n	80004f2 <__aeabi_fmul+0x15e>
 80004c8:	ea92 0f0c 	teq	r2, ip
 80004cc:	d101      	bne.n	80004d2 <__aeabi_fmul+0x13e>
 80004ce:	0242      	lsls	r2, r0, #9
 80004d0:	d10f      	bne.n	80004f2 <__aeabi_fmul+0x15e>
 80004d2:	ea93 0f0c 	teq	r3, ip
 80004d6:	d103      	bne.n	80004e0 <__aeabi_fmul+0x14c>
 80004d8:	024b      	lsls	r3, r1, #9
 80004da:	bf18      	it	ne
 80004dc:	4608      	movne	r0, r1
 80004de:	d108      	bne.n	80004f2 <__aeabi_fmul+0x15e>
 80004e0:	ea80 0001 	eor.w	r0, r0, r1
 80004e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004e8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004f0:	4770      	bx	lr
 80004f2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004f6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004fa:	4770      	bx	lr

080004fc <__aeabi_fdiv>:
 80004fc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000500:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000504:	bf1e      	ittt	ne
 8000506:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800050a:	ea92 0f0c 	teqne	r2, ip
 800050e:	ea93 0f0c 	teqne	r3, ip
 8000512:	d069      	beq.n	80005e8 <__aeabi_fdiv+0xec>
 8000514:	eba2 0203 	sub.w	r2, r2, r3
 8000518:	ea80 0c01 	eor.w	ip, r0, r1
 800051c:	0249      	lsls	r1, r1, #9
 800051e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000522:	d037      	beq.n	8000594 <__aeabi_fdiv+0x98>
 8000524:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000528:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800052c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000530:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000534:	428b      	cmp	r3, r1
 8000536:	bf38      	it	cc
 8000538:	005b      	lslcc	r3, r3, #1
 800053a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800053e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000542:	428b      	cmp	r3, r1
 8000544:	bf24      	itt	cs
 8000546:	1a5b      	subcs	r3, r3, r1
 8000548:	ea40 000c 	orrcs.w	r0, r0, ip
 800054c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000550:	bf24      	itt	cs
 8000552:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000556:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800055a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800055e:	bf24      	itt	cs
 8000560:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000564:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000568:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800056c:	bf24      	itt	cs
 800056e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000572:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000576:	011b      	lsls	r3, r3, #4
 8000578:	bf18      	it	ne
 800057a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800057e:	d1e0      	bne.n	8000542 <__aeabi_fdiv+0x46>
 8000580:	2afd      	cmp	r2, #253	; 0xfd
 8000582:	f63f af50 	bhi.w	8000426 <__aeabi_fmul+0x92>
 8000586:	428b      	cmp	r3, r1
 8000588:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800058c:	bf08      	it	eq
 800058e:	f020 0001 	biceq.w	r0, r0, #1
 8000592:	4770      	bx	lr
 8000594:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000598:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800059c:	327f      	adds	r2, #127	; 0x7f
 800059e:	bfc2      	ittt	gt
 80005a0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005a4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a8:	4770      	bxgt	lr
 80005aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005ae:	f04f 0300 	mov.w	r3, #0
 80005b2:	3a01      	subs	r2, #1
 80005b4:	e737      	b.n	8000426 <__aeabi_fmul+0x92>
 80005b6:	f092 0f00 	teq	r2, #0
 80005ba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005be:	bf02      	ittt	eq
 80005c0:	0040      	lsleq	r0, r0, #1
 80005c2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005c6:	3a01      	subeq	r2, #1
 80005c8:	d0f9      	beq.n	80005be <__aeabi_fdiv+0xc2>
 80005ca:	ea40 000c 	orr.w	r0, r0, ip
 80005ce:	f093 0f00 	teq	r3, #0
 80005d2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005d6:	bf02      	ittt	eq
 80005d8:	0049      	lsleq	r1, r1, #1
 80005da:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005de:	3b01      	subeq	r3, #1
 80005e0:	d0f9      	beq.n	80005d6 <__aeabi_fdiv+0xda>
 80005e2:	ea41 010c 	orr.w	r1, r1, ip
 80005e6:	e795      	b.n	8000514 <__aeabi_fdiv+0x18>
 80005e8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005ec:	ea92 0f0c 	teq	r2, ip
 80005f0:	d108      	bne.n	8000604 <__aeabi_fdiv+0x108>
 80005f2:	0242      	lsls	r2, r0, #9
 80005f4:	f47f af7d 	bne.w	80004f2 <__aeabi_fmul+0x15e>
 80005f8:	ea93 0f0c 	teq	r3, ip
 80005fc:	f47f af70 	bne.w	80004e0 <__aeabi_fmul+0x14c>
 8000600:	4608      	mov	r0, r1
 8000602:	e776      	b.n	80004f2 <__aeabi_fmul+0x15e>
 8000604:	ea93 0f0c 	teq	r3, ip
 8000608:	d104      	bne.n	8000614 <__aeabi_fdiv+0x118>
 800060a:	024b      	lsls	r3, r1, #9
 800060c:	f43f af4c 	beq.w	80004a8 <__aeabi_fmul+0x114>
 8000610:	4608      	mov	r0, r1
 8000612:	e76e      	b.n	80004f2 <__aeabi_fmul+0x15e>
 8000614:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000618:	bf18      	it	ne
 800061a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800061e:	d1ca      	bne.n	80005b6 <__aeabi_fdiv+0xba>
 8000620:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000624:	f47f af5c 	bne.w	80004e0 <__aeabi_fmul+0x14c>
 8000628:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800062c:	f47f af3c 	bne.w	80004a8 <__aeabi_fmul+0x114>
 8000630:	e75f      	b.n	80004f2 <__aeabi_fmul+0x15e>
 8000632:	bf00      	nop

08000634 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr

08000640 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800064c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000650:	f023 0218 	bic.w	r2, r3, #24
 8000654:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4313      	orrs	r3, r2
 800065c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000660:	bf00      	nop
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr

0800066a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800066a:	b480      	push	{r7}
 800066c:	b085      	sub	sp, #20
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000676:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000678:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	4313      	orrs	r3, r2
 8000680:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000686:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4013      	ands	r3, r2
 800068c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800068e:	68fb      	ldr	r3, [r7, #12]
}
 8000690:	bf00      	nop
 8000692:	3714      	adds	r7, #20
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr
	...

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a2:	f000 fa23 	bl	8000aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a6:	f000 f86b 	bl	8000780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006aa:	f000 f917 	bl	80008dc <MX_GPIO_Init>
  MX_ADC_Init();
 80006ae:	f000 f8c1 	bl	8000834 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 80006b2:	2001      	movs	r0, #1
 80006b4:	f001 f9aa 	bl	8001a0c <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t umbral = 1470;
 80006b8:	f240 53be 	movw	r3, #1470	; 0x5be
 80006bc:	80fb      	strh	r3, [r7, #6]
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006c4:	4827      	ldr	r0, [pc, #156]	; (8000764 <main+0xc8>)
 80006c6:	f001 f961 	bl	800198c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006d0:	4824      	ldr	r0, [pc, #144]	; (8000764 <main+0xc8>)
 80006d2:	f001 f95b 	bl	800198c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006dc:	4821      	ldr	r0, [pc, #132]	; (8000764 <main+0xc8>)
 80006de:	f001 f955 	bl	800198c <HAL_GPIO_WritePin>

      HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006e8:	481e      	ldr	r0, [pc, #120]	; (8000764 <main+0xc8>)
 80006ea:	f001 f94f 	bl	800198c <HAL_GPIO_WritePin>
      if (HAL_ADC_Start(&hadc) == HAL_OK)
 80006ee:	481e      	ldr	r0, [pc, #120]	; (8000768 <main+0xcc>)
 80006f0:	f000 fccc 	bl	800108c <HAL_ADC_Start>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d1e1      	bne.n	80006be <main+0x22>
      {
          if (HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY) == HAL_OK)
 80006fa:	f04f 31ff 	mov.w	r1, #4294967295
 80006fe:	481a      	ldr	r0, [pc, #104]	; (8000768 <main+0xcc>)
 8000700:	f000 fd0a 	bl	8001118 <HAL_ADC_PollForConversion>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d1d9      	bne.n	80006be <main+0x22>
          {
              adc_value = HAL_ADC_GetValue(&hadc);
 800070a:	4817      	ldr	r0, [pc, #92]	; (8000768 <main+0xcc>)
 800070c:	f000 fd9b 	bl	8001246 <HAL_ADC_GetValue>
 8000710:	4603      	mov	r3, r0
 8000712:	b29a      	uxth	r2, r3
 8000714:	4b15      	ldr	r3, [pc, #84]	; (800076c <main+0xd0>)
 8000716:	801a      	strh	r2, [r3, #0]
              status =  HAL_ADC_GetValue(&hadc);
 8000718:	4813      	ldr	r0, [pc, #76]	; (8000768 <main+0xcc>)
 800071a:	f000 fd94 	bl	8001246 <HAL_ADC_GetValue>
 800071e:	4603      	mov	r3, r0
 8000720:	461a      	mov	r2, r3
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <main+0xd4>)
 8000724:	601a      	str	r2, [r3, #0]
              voltage = (float)adc_value * (float)5 / 4095.0;
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <main+0xd0>)
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff fdda 	bl	80002e4 <__aeabi_ui2f>
 8000730:	4603      	mov	r3, r0
 8000732:	4910      	ldr	r1, [pc, #64]	; (8000774 <main+0xd8>)
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff fe2d 	bl	8000394 <__aeabi_fmul>
 800073a:	4603      	mov	r3, r0
 800073c:	490e      	ldr	r1, [pc, #56]	; (8000778 <main+0xdc>)
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff fedc 	bl	80004fc <__aeabi_fdiv>
 8000744:	4603      	mov	r3, r0
 8000746:	461a      	mov	r2, r3
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <main+0xe0>)
 800074a:	601a      	str	r2, [r3, #0]

              if (adc_value >= umbral)
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <main+0xd0>)
 800074e:	881b      	ldrh	r3, [r3, #0]
 8000750:	88fa      	ldrh	r2, [r7, #6]
 8000752:	429a      	cmp	r2, r3
 8000754:	d8b3      	bhi.n	80006be <main+0x22>
                  {
                    HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_SET);
 8000756:	2201      	movs	r2, #1
 8000758:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800075c:	4801      	ldr	r0, [pc, #4]	; (8000764 <main+0xc8>)
 800075e:	f001 f915 	bl	800198c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 8000762:	e7ac      	b.n	80006be <main+0x22>
 8000764:	48000400 	.word	0x48000400
 8000768:	20000028 	.word	0x20000028
 800076c:	2000008c 	.word	0x2000008c
 8000770:	20000090 	.word	0x20000090
 8000774:	40a00000 	.word	0x40a00000
 8000778:	457ff000 	.word	0x457ff000
 800077c:	20000094 	.word	0x20000094

08000780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b09a      	sub	sp, #104	; 0x68
 8000784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000786:	f107 0320 	add.w	r3, r7, #32
 800078a:	2248      	movs	r2, #72	; 0x48
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f002 fa12 	bl	8002bb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]
 80007a2:	615a      	str	r2, [r3, #20]
 80007a4:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007a6:	f001 f909 	bl	80019bc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007aa:	2000      	movs	r0, #0
 80007ac:	f7ff ff48 	bl	8000640 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007b0:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <SystemClock_Config+0xb0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80007b8:	4a1d      	ldr	r2, [pc, #116]	; (8000830 <SystemClock_Config+0xb0>)
 80007ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007be:	6013      	str	r3, [r2, #0]
 80007c0:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <SystemClock_Config+0xb0>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80007cc:	2324      	movs	r3, #36	; 0x24
 80007ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007d0:	2381      	movs	r3, #129	; 0x81
 80007d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007d4:	2301      	movs	r3, #1
 80007d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80007d8:	2300      	movs	r3, #0
 80007da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007dc:	2360      	movs	r3, #96	; 0x60
 80007de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e4:	f107 0320 	add.w	r3, r7, #32
 80007e8:	4618      	mov	r0, r3
 80007ea:	f001 fbbb 	bl	8001f64 <HAL_RCC_OscConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80007f4:	f000 f8be 	bl	8000974 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 80007f8:	236f      	movs	r3, #111	; 0x6f
 80007fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	2100      	movs	r1, #0
 8000818:	4618      	mov	r0, r3
 800081a:	f001 ff25 	bl	8002668 <HAL_RCC_ClockConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000824:	f000 f8a6 	bl	8000974 <Error_Handler>
  }
}
 8000828:	bf00      	nop
 800082a:	3768      	adds	r7, #104	; 0x68
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	58000400 	.word	0x58000400

08000834 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000838:	4b25      	ldr	r3, [pc, #148]	; (80008d0 <MX_ADC_Init+0x9c>)
 800083a:	4a26      	ldr	r2, [pc, #152]	; (80008d4 <MX_ADC_Init+0xa0>)
 800083c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800083e:	4b24      	ldr	r3, [pc, #144]	; (80008d0 <MX_ADC_Init+0x9c>)
 8000840:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8000844:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b22      	ldr	r3, [pc, #136]	; (80008d0 <MX_ADC_Init+0x9c>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800084c:	4b20      	ldr	r3, [pc, #128]	; (80008d0 <MX_ADC_Init+0x9c>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000852:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <MX_ADC_Init+0x9c>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000858:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <MX_ADC_Init+0x9c>)
 800085a:	2204      	movs	r2, #4
 800085c:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800085e:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <MX_ADC_Init+0x9c>)
 8000860:	2200      	movs	r2, #0
 8000862:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000864:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <MX_ADC_Init+0x9c>)
 8000866:	2200      	movs	r2, #0
 8000868:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800086a:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <MX_ADC_Init+0x9c>)
 800086c:	2200      	movs	r2, #0
 800086e:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000870:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <MX_ADC_Init+0x9c>)
 8000872:	2201      	movs	r2, #1
 8000874:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000876:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <MX_ADC_Init+0x9c>)
 8000878:	2200      	movs	r2, #0
 800087a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800087e:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_ADC_Init+0x9c>)
 8000880:	2200      	movs	r2, #0
 8000882:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <MX_ADC_Init+0x9c>)
 8000886:	2200      	movs	r2, #0
 8000888:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_ADC_Init+0x9c>)
 800088c:	2200      	movs	r2, #0
 800088e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000892:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_ADC_Init+0x9c>)
 8000894:	2200      	movs	r2, #0
 8000896:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000898:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <MX_ADC_Init+0x9c>)
 800089a:	2200      	movs	r2, #0
 800089c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800089e:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_ADC_Init+0x9c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 80008a4:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <MX_ADC_Init+0x9c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <MX_ADC_Init+0x9c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80008b2:	4807      	ldr	r0, [pc, #28]	; (80008d0 <MX_ADC_Init+0x9c>)
 80008b4:	f000 fa56 	bl	8000d64 <HAL_ADC_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_ADC_Init+0x8e>
  {
    Error_Handler();
 80008be:	f000 f859 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */
  //HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_10);

  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_14);
 80008c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008c6:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_ADC_Init+0xa4>)
 80008c8:	f000 ff92 	bl	80017f0 <HAL_GPIO_DeInit>
  /* USER CODE END ADC_Init 2 */

}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000028 	.word	0x20000028
 80008d4:	40012400 	.word	0x40012400
 80008d8:	48000400 	.word	0x48000400

080008dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f0:	2004      	movs	r0, #4
 80008f2:	f7ff feba 	bl	800066a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	2002      	movs	r0, #2
 80008f8:	f7ff feb7 	bl	800066a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fc:	2001      	movs	r0, #1
 80008fe:	f7ff feb4 	bl	800066a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pins : PA3 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8000902:	230c      	movs	r3, #12
 8000904:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000912:	2307      	movs	r3, #7
 8000914:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	4619      	mov	r1, r3
 800091a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091e:	f000 fe07 	bl	8001530 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	2001      	movs	r0, #1
 8000924:	f7ff fea1 	bl	800066a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000928:	2004      	movs	r0, #4
 800092a:	f7ff fe9e 	bl	800066a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	2002      	movs	r0, #2
 8000930:	f7ff fe9b 	bl	800066a <LL_AHB2_GRP1_EnableClock>
/* USER CODE BEGIN MX_GPIO_Init_2 */



  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000934:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8000938:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000942:	2302      	movs	r3, #2
 8000944:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	4619      	mov	r1, r3
 800094a:	4809      	ldr	r0, [pc, #36]	; (8000970 <MX_GPIO_Init+0x94>)
 800094c:	f000 fdf0 	bl	8001530 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
*/
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000950:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000954:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000956:	2303      	movs	r3, #3
 8000958:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	4619      	mov	r1, r3
 8000962:	4803      	ldr	r0, [pc, #12]	; (8000970 <MX_GPIO_Init+0x94>)
 8000964:	f000 fde4 	bl	8001530 <HAL_GPIO_Init>

/* USER CODE END MX_GPIO_Init_2 */
}
 8000968:	bf00      	nop
 800096a:	3718      	adds	r7, #24
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	48000400 	.word	0x48000400

08000974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000978:	b672      	cpsid	i
}
 800097a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800097c:	e7fe      	b.n	800097c <Error_Handler+0x8>

0800097e <LL_AHB2_GRP1_EnableClock>:
{
 800097e:	b480      	push	{r7}
 8000980:	b085      	sub	sp, #20
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800098a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800098c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4313      	orrs	r3, r2
 8000994:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800099a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4013      	ands	r3, r2
 80009a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009a2:	68fb      	ldr	r3, [r7, #12]
}
 80009a4:	bf00      	nop
 80009a6:	3714      	adds	r7, #20
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr

080009ae <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80009ae:	b480      	push	{r7}
 80009b0:	b085      	sub	sp, #20
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80009b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80009bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4313      	orrs	r3, r2
 80009c4:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80009c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4013      	ands	r3, r2
 80009d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009d2:	68fb      	ldr	r3, [r7, #12]
}
 80009d4:	bf00      	nop
 80009d6:	3714      	adds	r7, #20
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr

080009de <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr
	...

080009ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b088      	sub	sp, #32
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a0d      	ldr	r2, [pc, #52]	; (8000a40 <HAL_ADC_MspInit+0x54>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d113      	bne.n	8000a36 <HAL_ADC_MspInit+0x4a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a0e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a12:	f7ff ffcc 	bl	80009ae <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	2002      	movs	r0, #2
 8000a18:	f7ff ffb1 	bl	800097e <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB14     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000a1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a20:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a22:	2303      	movs	r3, #3
 8000a24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2a:	f107 030c 	add.w	r3, r7, #12
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4804      	ldr	r0, [pc, #16]	; (8000a44 <HAL_ADC_MspInit+0x58>)
 8000a32:	f000 fd7d 	bl	8001530 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }

}
 8000a36:	bf00      	nop
 8000a38:	3720      	adds	r7, #32
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40012400 	.word	0x40012400
 8000a44:	48000400 	.word	0x48000400

08000a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <NMI_Handler+0x4>

08000a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <HardFault_Handler+0x4>

08000a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <MemManage_Handler+0x4>

08000a5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <BusFault_Handler+0x4>

08000a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <UsageFault_Handler+0x4>

08000a66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr

08000a72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr

08000a7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bc80      	pop	{r7}
 8000a88:	4770      	bx	lr

08000a8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a8e:	f000 f887 	bl	8000ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a98:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a9a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a9c:	f7ff fdca 	bl	8000634 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa0:	480c      	ldr	r0, [pc, #48]	; (8000ad4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aa2:	490d      	ldr	r1, [pc, #52]	; (8000ad8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aa4:	4a0d      	ldr	r2, [pc, #52]	; (8000adc <LoopForever+0xe>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa8:	e002      	b.n	8000ab0 <LoopCopyDataInit>

08000aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aae:	3304      	adds	r3, #4

08000ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab4:	d3f9      	bcc.n	8000aaa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ab8:	4c0a      	ldr	r4, [pc, #40]	; (8000ae4 <LoopForever+0x16>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000abc:	e001      	b.n	8000ac2 <LoopFillZerobss>

08000abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac0:	3204      	adds	r2, #4

08000ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac4:	d3fb      	bcc.n	8000abe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ac6:	f002 f87f 	bl	8002bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aca:	f7ff fde7 	bl	800069c <main>

08000ace <LoopForever>:

LoopForever:
    b LoopForever
 8000ace:	e7fe      	b.n	8000ace <LoopForever>
  ldr   r0, =_estack
 8000ad0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000adc:	08002ccc 	.word	0x08002ccc
  ldr r2, =_sbss
 8000ae0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ae4:	2000009c 	.word	0x2000009c

08000ae8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ae8:	e7fe      	b.n	8000ae8 <ADC_IRQHandler>
	...

08000aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000af2:	2300      	movs	r3, #0
 8000af4:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af6:	2003      	movs	r0, #3
 8000af8:	f000 fce8 	bl	80014cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000afc:	f001 ff96 	bl	8002a2c <HAL_RCC_GetHCLKFreq>
 8000b00:	4603      	mov	r3, r0
 8000b02:	4a09      	ldr	r2, [pc, #36]	; (8000b28 <HAL_Init+0x3c>)
 8000b04:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b06:	2000      	movs	r0, #0
 8000b08:	f000 f810 	bl	8000b2c <HAL_InitTick>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d002      	beq.n	8000b18 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	71fb      	strb	r3, [r7, #7]
 8000b16:	e001      	b.n	8000b1c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b18:	f7ff ff61 	bl	80009de <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000000 	.word	0x20000000

08000b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b34:	2300      	movs	r3, #0
 8000b36:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b38:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <HAL_InitTick+0x6c>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d024      	beq.n	8000b8a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b40:	f001 ff74 	bl	8002a2c <HAL_RCC_GetHCLKFreq>
 8000b44:	4602      	mov	r2, r0
 8000b46:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <HAL_InitTick+0x6c>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b50:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f000 fcdc 	bl	8001516 <HAL_SYSTICK_Config>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d10f      	bne.n	8000b84 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2b0f      	cmp	r3, #15
 8000b68:	d809      	bhi.n	8000b7e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	6879      	ldr	r1, [r7, #4]
 8000b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b72:	f000 fcb6 	bl	80014e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b76:	4a09      	ldr	r2, [pc, #36]	; (8000b9c <HAL_InitTick+0x70>)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6013      	str	r3, [r2, #0]
 8000b7c:	e007      	b.n	8000b8e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	73fb      	strb	r3, [r7, #15]
 8000b82:	e004      	b.n	8000b8e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b84:	2301      	movs	r3, #1
 8000b86:	73fb      	strb	r3, [r7, #15]
 8000b88:	e001      	b.n	8000b8e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000008 	.word	0x20000008
 8000b9c:	20000004 	.word	0x20000004

08000ba0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <HAL_IncTick+0x1c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <HAL_IncTick+0x20>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4413      	add	r3, r2
 8000bb0:	4a03      	ldr	r2, [pc, #12]	; (8000bc0 <HAL_IncTick+0x20>)
 8000bb2:	6013      	str	r3, [r2, #0]
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	20000008 	.word	0x20000008
 8000bc0:	20000098 	.word	0x20000098

08000bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc8:	4b02      	ldr	r3, [pc, #8]	; (8000bd4 <HAL_GetTick+0x10>)
 8000bca:	681b      	ldr	r3, [r3, #0]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr
 8000bd4:	20000098 	.word	0x20000098

08000bd8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr

08000bf2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	b085      	sub	sp, #20
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	60f8      	str	r0, [r7, #12]
 8000bfa:	60b9      	str	r1, [r7, #8]
 8000bfc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	695a      	ldr	r2, [r3, #20]
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	f003 0304 	and.w	r3, r3, #4
 8000c08:	2107      	movs	r1, #7
 8000c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	401a      	ands	r2, r3
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	f003 0304 	and.w	r3, r3, #4
 8000c18:	6879      	ldr	r1, [r7, #4]
 8000c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1e:	431a      	orrs	r2, r3
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr

08000c2e <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	b083      	sub	sp, #12
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
 8000c36:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	695a      	ldr	r2, [r3, #20]
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	f003 0304 	and.w	r3, r3, #4
 8000c42:	2107      	movs	r1, #7
 8000c44:	fa01 f303 	lsl.w	r3, r1, r3
 8000c48:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr

08000c5e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	b083      	sub	sp, #12
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d101      	bne.n	8000c76 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000c72:	2301      	movs	r3, #1
 8000c74:	e000      	b.n	8000c78 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000c76:	2300      	movs	r3, #0
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr

08000c82 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000c82:	b480      	push	{r7}
 8000c84:	b083      	sub	sp, #12
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000c92:	f023 0317 	bic.w	r3, r3, #23
 8000c96:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr

08000ca8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000cbc:	d101      	bne.n	8000cc2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e000      	b.n	8000cc4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000cc2:	2300      	movs	r3, #0
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc80      	pop	{r7}
 8000ccc:	4770      	bx	lr

08000cce <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000cde:	f023 0317 	bic.w	r3, r3, #23
 8000ce2:	f043 0201 	orr.w	r2, r3, #1
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr

08000cf4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d101      	bne.n	8000d0c <LL_ADC_IsEnabled+0x18>
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e000      	b.n	8000d0e <LL_ADC_IsEnabled+0x1a>
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr

08000d18 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000d28:	f023 0317 	bic.w	r3, r3, #23
 8000d2c:	f043 0204 	orr.w	r2, r3, #4
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc80      	pop	{r7}
 8000d3c:	4770      	bx	lr

08000d3e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b083      	sub	sp, #12
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	f003 0304 	and.w	r3, r3, #4
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	d101      	bne.n	8000d56 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000d52:	2301      	movs	r3, #1
 8000d54:	e000      	b.n	8000d58 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000d56:	2300      	movs	r3, #0
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
	...

08000d64 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d101      	bne.n	8000d86 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e17e      	b.n	8001084 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	691b      	ldr	r3, [r3, #16]
 8000d8a:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d109      	bne.n	8000da8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff fe29 	bl	80009ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2200      	movs	r2, #0
 8000da4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff7b 	bl	8000ca8 <LL_ADC_IsInternalRegulatorEnabled>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d115      	bne.n	8000de4 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff60 	bl	8000c82 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000dc2:	4b9e      	ldr	r3, [pc, #632]	; (800103c <HAL_ADC_Init+0x2d8>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	099b      	lsrs	r3, r3, #6
 8000dc8:	4a9d      	ldr	r2, [pc, #628]	; (8001040 <HAL_ADC_Init+0x2dc>)
 8000dca:	fba2 2303 	umull	r2, r3, r2, r3
 8000dce:	099b      	lsrs	r3, r3, #6
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000dd6:	e002      	b.n	8000dde <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d1f9      	bne.n	8000dd8 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ff5d 	bl	8000ca8 <LL_ADC_IsInternalRegulatorEnabled>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d10d      	bne.n	8000e10 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df8:	f043 0210 	orr.w	r2, r3, #16
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e04:	f043 0201 	orr.w	r2, r3, #1
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ff92 	bl	8000d3e <LL_ADC_REG_IsConversionOngoing>
 8000e1a:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e20:	f003 0310 	and.w	r3, r3, #16
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	f040 8124 	bne.w	8001072 <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f040 8120 	bne.w	8001072 <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e36:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000e3a:	f043 0202 	orr.w	r2, r3, #2
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff ff54 	bl	8000cf4 <LL_ADC_IsEnabled>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 80a7 	bne.w	8000fa2 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	7e1b      	ldrb	r3, [r3, #24]
 8000e5c:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000e5e:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	7e5b      	ldrb	r3, [r3, #25]
 8000e64:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000e66:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	7e9b      	ldrb	r3, [r3, #26]
 8000e6c:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000e6e:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	d002      	beq.n	8000e7e <HAL_ADC_Init+0x11a>
 8000e78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e7c:	e000      	b.n	8000e80 <HAL_ADC_Init+0x11c>
 8000e7e:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000e80:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000e86:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	691b      	ldr	r3, [r3, #16]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	da04      	bge.n	8000e9a <HAL_ADC_Init+0x136>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	691b      	ldr	r3, [r3, #16]
 8000e94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000e98:	e001      	b.n	8000e9e <HAL_ADC_Init+0x13a>
 8000e9a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8000e9e:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000ea6:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000ea8:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d114      	bne.n	8000ee4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	7e9b      	ldrb	r3, [r3, #26]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d104      	bne.n	8000ecc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec8:	61bb      	str	r3, [r7, #24]
 8000eca:	e00b      	b.n	8000ee4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed0:	f043 0220 	orr.w	r2, r3, #32
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000edc:	f043 0201 	orr.w	r2, r3, #1
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d009      	beq.n	8000f00 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef0:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8000f0a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	6812      	ldr	r2, [r2, #0]
 8000f12:	69b9      	ldr	r1, [r7, #24]
 8000f14:	430b      	orrs	r3, r1
 8000f16:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f24:	4313      	orrs	r3, r2
 8000f26:	697a      	ldr	r2, [r7, #20]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d111      	bne.n	8000f5a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000f42:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8000f48:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8000f4e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	691a      	ldr	r2, [r3, #16]
 8000f60:	4b38      	ldr	r3, [pc, #224]	; (8001044 <HAL_ADC_Init+0x2e0>)
 8000f62:	4013      	ands	r3, r2
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	6812      	ldr	r2, [r2, #0]
 8000f68:	6979      	ldr	r1, [r7, #20]
 8000f6a:	430b      	orrs	r3, r1
 8000f6c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8000f76:	d014      	beq.n	8000fa2 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f80:	d00f      	beq.n	8000fa2 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000f86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000f8a:	d00a      	beq.n	8000fa2 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8000f8c:	4b2e      	ldr	r3, [pc, #184]	; (8001048 <HAL_ADC_Init+0x2e4>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000f9c:	492a      	ldr	r1, [pc, #168]	; (8001048 <HAL_ADC_Init+0x2e4>)
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6818      	ldr	r0, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000faa:	461a      	mov	r2, r3
 8000fac:	2100      	movs	r1, #0
 8000fae:	f7ff fe20 	bl	8000bf2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6818      	ldr	r0, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4923      	ldr	r1, [pc, #140]	; (800104c <HAL_ADC_Init+0x2e8>)
 8000fbe:	f7ff fe18 	bl	8000bf2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	691b      	ldr	r3, [r3, #16]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d108      	bne.n	8000fdc <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f062 020f 	orn	r2, r2, #15
 8000fd8:	629a      	str	r2, [r3, #40]	; 0x28
 8000fda:	e017      	b.n	800100c <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	691b      	ldr	r3, [r3, #16]
 8000fe0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000fe4:	d112      	bne.n	800100c <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	69db      	ldr	r3, [r3, #28]
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	f003 031c 	and.w	r3, r3, #28
 8000ff8:	f06f 020f 	mvn.w	r2, #15
 8000ffc:	fa02 f103 	lsl.w	r1, r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	430a      	orrs	r2, r1
 800100a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fe0b 	bl	8000c2e <LL_ADC_GetSamplingTimeCommonChannels>
 8001018:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800101e:	429a      	cmp	r2, r3
 8001020:	d116      	bne.n	8001050 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102c:	f023 0303 	bic.w	r3, r3, #3
 8001030:	f043 0201 	orr.w	r2, r3, #1
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001038:	e023      	b.n	8001082 <HAL_ADC_Init+0x31e>
 800103a:	bf00      	nop
 800103c:	20000000 	.word	0x20000000
 8001040:	053e2d63 	.word	0x053e2d63
 8001044:	1ffffc02 	.word	0x1ffffc02
 8001048:	40012708 	.word	0x40012708
 800104c:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001054:	f023 0312 	bic.w	r3, r3, #18
 8001058:	f043 0210 	orr.w	r2, r3, #16
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001064:	f043 0201 	orr.w	r2, r3, #1
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001070:	e007      	b.n	8001082 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001076:	f043 0210 	orr.w	r2, r3, #16
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8001082:	7ffb      	ldrb	r3, [r7, #31]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3720      	adds	r7, #32
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fe50 	bl	8000d3e <LL_ADC_REG_IsConversionOngoing>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d132      	bne.n	800110a <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d101      	bne.n	80010b2 <HAL_ADC_Start+0x26>
 80010ae:	2302      	movs	r3, #2
 80010b0:	e02e      	b.n	8001110 <HAL_ADC_Start+0x84>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2201      	movs	r2, #1
 80010b6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 f8d0 	bl	8001260 <ADC_Enable>
 80010c0:	4603      	mov	r3, r0
 80010c2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d11a      	bne.n	8001100 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80010d2:	f023 0301 	bic.w	r3, r3, #1
 80010d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	221c      	movs	r2, #28
 80010ea:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fe0d 	bl	8000d18 <LL_ADC_REG_StartConversion>
 80010fe:	e006      	b.n	800110e <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001108:	e001      	b.n	800110e <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800110a:	2302      	movs	r3, #2
 800110c:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 800110e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	2b08      	cmp	r3, #8
 8001128:	d102      	bne.n	8001130 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800112a:	2308      	movs	r3, #8
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	e010      	b.n	8001152 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	2b00      	cmp	r3, #0
 800113c:	d007      	beq.n	800114e <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001142:	f043 0220 	orr.w	r2, r3, #32
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e077      	b.n	800123e <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800114e:	2304      	movs	r3, #4
 8001150:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001152:	f7ff fd37 	bl	8000bc4 <HAL_GetTick>
 8001156:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001158:	e021      	b.n	800119e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001160:	d01d      	beq.n	800119e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001162:	f7ff fd2f 	bl	8000bc4 <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	429a      	cmp	r2, r3
 8001170:	d302      	bcc.n	8001178 <HAL_ADC_PollForConversion+0x60>
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d112      	bne.n	800119e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	4013      	ands	r3, r2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d10b      	bne.n	800119e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118a:	f043 0204 	orr.w	r2, r3, #4
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e04f      	b.n	800123e <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4013      	ands	r3, r2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d0d6      	beq.n	800115a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff fd4e 	bl	8000c5e <LL_ADC_REG_IsTriggerSourceSWStart>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d031      	beq.n	800122c <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	7e9b      	ldrb	r3, [r3, #26]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d12d      	bne.n	800122c <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0308 	and.w	r3, r3, #8
 80011da:	2b08      	cmp	r3, #8
 80011dc:	d126      	bne.n	800122c <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fdab 	bl	8000d3e <LL_ADC_REG_IsConversionOngoing>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d112      	bne.n	8001214 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 020c 	bic.w	r2, r2, #12
 80011fc:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001202:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001206:	f023 0301 	bic.w	r3, r3, #1
 800120a:	f043 0201 	orr.w	r2, r3, #1
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	659a      	str	r2, [r3, #88]	; 0x58
 8001212:	e00b      	b.n	800122c <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001218:	f043 0220 	orr.w	r2, r3, #32
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001224:	f043 0201 	orr.w	r2, r3, #1
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	7e1b      	ldrb	r3, [r3, #24]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d103      	bne.n	800123c <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	220c      	movs	r2, #12
 800123a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001254:	4618      	mov	r0, r3
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
	...

08001260 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001268:	2300      	movs	r3, #0
 800126a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fd3f 	bl	8000cf4 <LL_ADC_IsEnabled>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d169      	bne.n	8001350 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	689a      	ldr	r2, [r3, #8]
 8001282:	4b36      	ldr	r3, [pc, #216]	; (800135c <ADC_Enable+0xfc>)
 8001284:	4013      	ands	r3, r2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d00d      	beq.n	80012a6 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128e:	f043 0210 	orr.w	r2, r3, #16
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800129a:	f043 0201 	orr.w	r2, r3, #1
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e055      	b.n	8001352 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fd0f 	bl	8000cce <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80012b0:	482b      	ldr	r0, [pc, #172]	; (8001360 <ADC_Enable+0x100>)
 80012b2:	f7ff fc91 	bl	8000bd8 <LL_ADC_GetCommonPathInternalCh>
 80012b6:	4603      	mov	r3, r0
 80012b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d00f      	beq.n	80012e0 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80012c0:	4b28      	ldr	r3, [pc, #160]	; (8001364 <ADC_Enable+0x104>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	099b      	lsrs	r3, r3, #6
 80012c6:	4a28      	ldr	r2, [pc, #160]	; (8001368 <ADC_Enable+0x108>)
 80012c8:	fba2 2303 	umull	r2, r3, r2, r3
 80012cc:	099b      	lsrs	r3, r3, #6
 80012ce:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80012d0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80012d2:	e002      	b.n	80012da <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1f9      	bne.n	80012d4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	7e5b      	ldrb	r3, [r3, #25]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d033      	beq.n	8001350 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80012e8:	f7ff fc6c 	bl	8000bc4 <HAL_GetTick>
 80012ec:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80012ee:	e028      	b.n	8001342 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fcfd 	bl	8000cf4 <LL_ADC_IsEnabled>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d104      	bne.n	800130a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fce2 	bl	8000cce <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800130a:	f7ff fc5b 	bl	8000bc4 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d914      	bls.n	8001342 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	2b01      	cmp	r3, #1
 8001324:	d00d      	beq.n	8001342 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132a:	f043 0210 	orr.w	r2, r3, #16
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001336:	f043 0201 	orr.w	r2, r3, #1
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e007      	b.n	8001352 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	2b01      	cmp	r3, #1
 800134e:	d1cf      	bne.n	80012f0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	80000017 	.word	0x80000017
 8001360:	40012708 	.word	0x40012708
 8001364:	20000000 	.word	0x20000000
 8001368:	053e2d63 	.word	0x053e2d63

0800136c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <__NVIC_SetPriorityGrouping+0x44>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001382:	68ba      	ldr	r2, [r7, #8]
 8001384:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001388:	4013      	ands	r3, r2
 800138a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001394:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800139c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800139e:	4a04      	ldr	r2, [pc, #16]	; (80013b0 <__NVIC_SetPriorityGrouping+0x44>)
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	60d3      	str	r3, [r2, #12]
}
 80013a4:	bf00      	nop
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <__NVIC_GetPriorityGrouping+0x18>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	0a1b      	lsrs	r3, r3, #8
 80013be:	f003 0307 	and.w	r3, r3, #7
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	6039      	str	r1, [r7, #0]
 80013da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	db0a      	blt.n	80013fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	490c      	ldr	r1, [pc, #48]	; (800141c <__NVIC_SetPriority+0x4c>)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	0112      	lsls	r2, r2, #4
 80013f0:	b2d2      	uxtb	r2, r2
 80013f2:	440b      	add	r3, r1
 80013f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f8:	e00a      	b.n	8001410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	4908      	ldr	r1, [pc, #32]	; (8001420 <__NVIC_SetPriority+0x50>)
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	f003 030f 	and.w	r3, r3, #15
 8001406:	3b04      	subs	r3, #4
 8001408:	0112      	lsls	r2, r2, #4
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	440b      	add	r3, r1
 800140e:	761a      	strb	r2, [r3, #24]
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	e000e100 	.word	0xe000e100
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001424:	b480      	push	{r7}
 8001426:	b089      	sub	sp, #36	; 0x24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	f1c3 0307 	rsb	r3, r3, #7
 800143e:	2b04      	cmp	r3, #4
 8001440:	bf28      	it	cs
 8001442:	2304      	movcs	r3, #4
 8001444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3304      	adds	r3, #4
 800144a:	2b06      	cmp	r3, #6
 800144c:	d902      	bls.n	8001454 <NVIC_EncodePriority+0x30>
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3b03      	subs	r3, #3
 8001452:	e000      	b.n	8001456 <NVIC_EncodePriority+0x32>
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	f04f 32ff 	mov.w	r2, #4294967295
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43da      	mvns	r2, r3
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	401a      	ands	r2, r3
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800146c:	f04f 31ff 	mov.w	r1, #4294967295
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	fa01 f303 	lsl.w	r3, r1, r3
 8001476:	43d9      	mvns	r1, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800147c:	4313      	orrs	r3, r2
         );
}
 800147e:	4618      	mov	r0, r3
 8001480:	3724      	adds	r7, #36	; 0x24
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001498:	d301      	bcc.n	800149e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800149a:	2301      	movs	r3, #1
 800149c:	e00f      	b.n	80014be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800149e:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <SysTick_Config+0x40>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014a6:	210f      	movs	r1, #15
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ac:	f7ff ff90 	bl	80013d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <SysTick_Config+0x40>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014b6:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <SysTick_Config+0x40>)
 80014b8:	2207      	movs	r2, #7
 80014ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	e000e010 	.word	0xe000e010

080014cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff ff49 	bl	800136c <__NVIC_SetPriorityGrouping>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b086      	sub	sp, #24
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	4603      	mov	r3, r0
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
 80014ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014f0:	f7ff ff60 	bl	80013b4 <__NVIC_GetPriorityGrouping>
 80014f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	68b9      	ldr	r1, [r7, #8]
 80014fa:	6978      	ldr	r0, [r7, #20]
 80014fc:	f7ff ff92 	bl	8001424 <NVIC_EncodePriority>
 8001500:	4602      	mov	r2, r0
 8001502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001506:	4611      	mov	r1, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff61 	bl	80013d0 <__NVIC_SetPriority>
}
 800150e:	bf00      	nop
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff ffb2 	bl	8001488 <SysTick_Config>
 8001524:	4603      	mov	r3, r0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001530:	b480      	push	{r7}
 8001532:	b087      	sub	sp, #28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800153e:	e140      	b.n	80017c2 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	2101      	movs	r1, #1
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	fa01 f303 	lsl.w	r3, r1, r3
 800154c:	4013      	ands	r3, r2
 800154e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2b00      	cmp	r3, #0
 8001554:	f000 8132 	beq.w	80017bc <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	2b01      	cmp	r3, #1
 8001562:	d005      	beq.n	8001570 <HAL_GPIO_Init+0x40>
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d130      	bne.n	80015d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	2203      	movs	r2, #3
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	68da      	ldr	r2, [r3, #12]
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4313      	orrs	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015a6:	2201      	movs	r2, #1
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43db      	mvns	r3, r3
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	4013      	ands	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	091b      	lsrs	r3, r3, #4
 80015bc:	f003 0201 	and.w	r2, r3, #1
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d017      	beq.n	800160e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	2203      	movs	r2, #3
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4013      	ands	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f003 0303 	and.w	r3, r3, #3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d123      	bne.n	8001662 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	08da      	lsrs	r2, r3, #3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	3208      	adds	r2, #8
 8001622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001626:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	220f      	movs	r2, #15
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43db      	mvns	r3, r3
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4013      	ands	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	691a      	ldr	r2, [r3, #16]
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	08da      	lsrs	r2, r3, #3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3208      	adds	r2, #8
 800165c:	6939      	ldr	r1, [r7, #16]
 800165e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	2203      	movs	r2, #3
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	4013      	ands	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 0203 	and.w	r2, r3, #3
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4313      	orrs	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 808c 	beq.w	80017bc <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80016a4:	4a4e      	ldr	r2, [pc, #312]	; (80017e0 <HAL_GPIO_Init+0x2b0>)
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	089b      	lsrs	r3, r3, #2
 80016aa:	3302      	adds	r3, #2
 80016ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	2207      	movs	r2, #7
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4013      	ands	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016ce:	d00d      	beq.n	80016ec <HAL_GPIO_Init+0x1bc>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a44      	ldr	r2, [pc, #272]	; (80017e4 <HAL_GPIO_Init+0x2b4>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d007      	beq.n	80016e8 <HAL_GPIO_Init+0x1b8>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a43      	ldr	r2, [pc, #268]	; (80017e8 <HAL_GPIO_Init+0x2b8>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d101      	bne.n	80016e4 <HAL_GPIO_Init+0x1b4>
 80016e0:	2302      	movs	r3, #2
 80016e2:	e004      	b.n	80016ee <HAL_GPIO_Init+0x1be>
 80016e4:	2307      	movs	r3, #7
 80016e6:	e002      	b.n	80016ee <HAL_GPIO_Init+0x1be>
 80016e8:	2301      	movs	r3, #1
 80016ea:	e000      	b.n	80016ee <HAL_GPIO_Init+0x1be>
 80016ec:	2300      	movs	r3, #0
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	f002 0203 	and.w	r2, r2, #3
 80016f4:	0092      	lsls	r2, r2, #2
 80016f6:	4093      	lsls	r3, r2
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016fe:	4938      	ldr	r1, [pc, #224]	; (80017e0 <HAL_GPIO_Init+0x2b0>)
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	089b      	lsrs	r3, r3, #2
 8001704:	3302      	adds	r3, #2
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800170c:	4b37      	ldr	r3, [pc, #220]	; (80017ec <HAL_GPIO_Init+0x2bc>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	43db      	mvns	r3, r3
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	4013      	ands	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d003      	beq.n	8001730 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	4313      	orrs	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001730:	4a2e      	ldr	r2, [pc, #184]	; (80017ec <HAL_GPIO_Init+0x2bc>)
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001736:	4b2d      	ldr	r3, [pc, #180]	; (80017ec <HAL_GPIO_Init+0x2bc>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	43db      	mvns	r3, r3
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4013      	ands	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4313      	orrs	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800175a:	4a24      	ldr	r2, [pc, #144]	; (80017ec <HAL_GPIO_Init+0x2bc>)
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001760:	4b22      	ldr	r3, [pc, #136]	; (80017ec <HAL_GPIO_Init+0x2bc>)
 8001762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001766:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	43db      	mvns	r3, r3
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	4013      	ands	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4313      	orrs	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001786:	4a19      	ldr	r2, [pc, #100]	; (80017ec <HAL_GPIO_Init+0x2bc>)
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800178e:	4b17      	ldr	r3, [pc, #92]	; (80017ec <HAL_GPIO_Init+0x2bc>)
 8001790:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001794:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	43db      	mvns	r3, r3
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4013      	ands	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80017b4:	4a0d      	ldr	r2, [pc, #52]	; (80017ec <HAL_GPIO_Init+0x2bc>)
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	3301      	adds	r3, #1
 80017c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	fa22 f303 	lsr.w	r3, r2, r3
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f47f aeb7 	bne.w	8001540 <HAL_GPIO_Init+0x10>
  }
}
 80017d2:	bf00      	nop
 80017d4:	bf00      	nop
 80017d6:	371c      	adds	r7, #28
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40010000 	.word	0x40010000
 80017e4:	48000400 	.word	0x48000400
 80017e8:	48000800 	.word	0x48000800
 80017ec:	58000800 	.word	0x58000800

080017f0 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b087      	sub	sp, #28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80017fe:	e0af      	b.n	8001960 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001800:	2201      	movs	r2, #1
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	4013      	ands	r3, r2
 800180c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 80a2 	beq.w	800195a <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001816:	4a59      	ldr	r2, [pc, #356]	; (800197c <HAL_GPIO_DeInit+0x18c>)
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	089b      	lsrs	r3, r3, #2
 800181c:	3302      	adds	r3, #2
 800181e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001822:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	f003 0303 	and.w	r3, r3, #3
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	2207      	movs	r2, #7
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	4013      	ands	r3, r2
 8001836:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800183e:	d00d      	beq.n	800185c <HAL_GPIO_DeInit+0x6c>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a4f      	ldr	r2, [pc, #316]	; (8001980 <HAL_GPIO_DeInit+0x190>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d007      	beq.n	8001858 <HAL_GPIO_DeInit+0x68>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a4e      	ldr	r2, [pc, #312]	; (8001984 <HAL_GPIO_DeInit+0x194>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d101      	bne.n	8001854 <HAL_GPIO_DeInit+0x64>
 8001850:	2302      	movs	r3, #2
 8001852:	e004      	b.n	800185e <HAL_GPIO_DeInit+0x6e>
 8001854:	2307      	movs	r3, #7
 8001856:	e002      	b.n	800185e <HAL_GPIO_DeInit+0x6e>
 8001858:	2301      	movs	r3, #1
 800185a:	e000      	b.n	800185e <HAL_GPIO_DeInit+0x6e>
 800185c:	2300      	movs	r3, #0
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	f002 0203 	and.w	r2, r2, #3
 8001864:	0092      	lsls	r2, r2, #2
 8001866:	4093      	lsls	r3, r2
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	429a      	cmp	r2, r3
 800186c:	d136      	bne.n	80018dc <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 800186e:	4b46      	ldr	r3, [pc, #280]	; (8001988 <HAL_GPIO_DeInit+0x198>)
 8001870:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	43db      	mvns	r3, r3
 8001878:	4943      	ldr	r1, [pc, #268]	; (8001988 <HAL_GPIO_DeInit+0x198>)
 800187a:	4013      	ands	r3, r2
 800187c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8001880:	4b41      	ldr	r3, [pc, #260]	; (8001988 <HAL_GPIO_DeInit+0x198>)
 8001882:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	43db      	mvns	r3, r3
 800188a:	493f      	ldr	r1, [pc, #252]	; (8001988 <HAL_GPIO_DeInit+0x198>)
 800188c:	4013      	ands	r3, r2
 800188e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001892:	4b3d      	ldr	r3, [pc, #244]	; (8001988 <HAL_GPIO_DeInit+0x198>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	43db      	mvns	r3, r3
 800189a:	493b      	ldr	r1, [pc, #236]	; (8001988 <HAL_GPIO_DeInit+0x198>)
 800189c:	4013      	ands	r3, r2
 800189e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80018a0:	4b39      	ldr	r3, [pc, #228]	; (8001988 <HAL_GPIO_DeInit+0x198>)
 80018a2:	685a      	ldr	r2, [r3, #4]
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	43db      	mvns	r3, r3
 80018a8:	4937      	ldr	r1, [pc, #220]	; (8001988 <HAL_GPIO_DeInit+0x198>)
 80018aa:	4013      	ands	r3, r2
 80018ac:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	2207      	movs	r2, #7
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80018be:	4a2f      	ldr	r2, [pc, #188]	; (800197c <HAL_GPIO_DeInit+0x18c>)
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	089b      	lsrs	r3, r3, #2
 80018c4:	3302      	adds	r3, #2
 80018c6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	43da      	mvns	r2, r3
 80018ce:	482b      	ldr	r0, [pc, #172]	; (800197c <HAL_GPIO_DeInit+0x18c>)
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	089b      	lsrs	r3, r3, #2
 80018d4:	400a      	ands	r2, r1
 80018d6:	3302      	adds	r3, #2
 80018d8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	2103      	movs	r1, #3
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	08da      	lsrs	r2, r3, #3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3208      	adds	r2, #8
 80018f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	220f      	movs	r2, #15
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43db      	mvns	r3, r3
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	08d2      	lsrs	r2, r2, #3
 8001910:	4019      	ands	r1, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3208      	adds	r2, #8
 8001916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	2103      	movs	r1, #3
 8001924:	fa01 f303 	lsl.w	r3, r1, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	401a      	ands	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	2101      	movs	r1, #1
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	fa01 f303 	lsl.w	r3, r1, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	401a      	ands	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68da      	ldr	r2, [r3, #12]
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	2103      	movs	r1, #3
 800194e:	fa01 f303 	lsl.w	r3, r1, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	401a      	ands	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	60da      	str	r2, [r3, #12]
    }

    position++;
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	3301      	adds	r3, #1
 800195e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	fa22 f303 	lsr.w	r3, r2, r3
 8001968:	2b00      	cmp	r3, #0
 800196a:	f47f af49 	bne.w	8001800 <HAL_GPIO_DeInit+0x10>
  }
}
 800196e:	bf00      	nop
 8001970:	bf00      	nop
 8001972:	371c      	adds	r7, #28
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	40010000 	.word	0x40010000
 8001980:	48000400 	.word	0x48000400
 8001984:	48000800 	.word	0x48000800
 8001988:	58000800 	.word	0x58000800

0800198c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	807b      	strh	r3, [r7, #2]
 8001998:	4613      	mov	r3, r2
 800199a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800199c:	787b      	ldrb	r3, [r7, #1]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019a2:	887a      	ldrh	r2, [r7, #2]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019a8:	e002      	b.n	80019b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019aa:	887a      	ldrh	r2, [r7, #2]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr
	...

080019bc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019c0:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a03      	ldr	r2, [pc, #12]	; (80019d4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80019c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ca:	6013      	str	r3, [r2, #0]
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr
 80019d4:	58000400 	.word	0x58000400

080019d8 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80019dc:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <LL_PWR_EnableBootC2+0x18>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	4a03      	ldr	r2, [pc, #12]	; (80019f0 <LL_PWR_EnableBootC2+0x18>)
 80019e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019e6:	60d3      	str	r3, [r2, #12]
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr
 80019f0:	58000400 	.word	0x58000400

080019f4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80019f8:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <HAL_PWREx_GetVoltageRange+0x14>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr
 8001a08:	58000400 	.word	0x58000400

08001a0c <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8001a14:	f7ff ffe0 	bl	80019d8 <LL_PWR_EnableBootC2>
}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <LL_PWR_IsEnabledBkUpAccess>:
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a30:	d101      	bne.n	8001a36 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr
 8001a40:	58000400 	.word	0x58000400

08001a44 <LL_RCC_HSE_EnableTcxo>:
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a56:	6013      	str	r3, [r2, #0]
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr

08001a60 <LL_RCC_HSE_DisableTcxo>:
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a72:	6013      	str	r3, [r2, #0]
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr

08001a7c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a8e:	d101      	bne.n	8001a94 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001a90:	2301      	movs	r3, #1
 8001a92:	e000      	b.n	8001a96 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr

08001a9e <LL_RCC_HSE_Enable>:
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab0:	6013      	str	r3, [r2, #0]
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr

08001aba <LL_RCC_HSE_Disable>:
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ac8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001acc:	6013      	str	r3, [r2, #0]
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr

08001ad6 <LL_RCC_HSE_IsReady>:
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ae8:	d101      	bne.n	8001aee <LL_RCC_HSE_IsReady+0x18>
 8001aea:	2301      	movs	r3, #1
 8001aec:	e000      	b.n	8001af0 <LL_RCC_HSE_IsReady+0x1a>
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr

08001af8 <LL_RCC_HSI_Enable>:
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b0a:	6013      	str	r3, [r2, #0]
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr

08001b14 <LL_RCC_HSI_Disable>:
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b26:	6013      	str	r3, [r2, #0]
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <LL_RCC_HSI_IsReady>:
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b42:	d101      	bne.n	8001b48 <LL_RCC_HSI_IsReady+0x18>
 8001b44:	2301      	movs	r3, #1
 8001b46:	e000      	b.n	8001b4a <LL_RCC_HSI_IsReady+0x1a>
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr

08001b52 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	061b      	lsls	r3, r3, #24
 8001b68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	604b      	str	r3, [r1, #4]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr

08001b7a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d101      	bne.n	8001b92 <LL_RCC_LSE_IsReady+0x18>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <LL_RCC_LSE_IsReady+0x1a>
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr

08001bbc <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bcc:	f023 0301 	bic.w	r3, r3, #1
 8001bd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr

08001bdc <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d101      	bne.n	8001bf4 <LL_RCC_LSI_IsReady+0x18>
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e000      	b.n	8001bf6 <LL_RCC_LSI_IsReady+0x1a>
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr

08001bfe <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	6013      	str	r3, [r2, #0]
}
 8001c12:	bf00      	nop
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr

08001c1a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c28:	f023 0301 	bic.w	r3, r3, #1
 8001c2c:	6013      	str	r3, [r2, #0]
}
 8001c2e:	bf00      	nop
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr

08001c36 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d101      	bne.n	8001c4c <LL_RCC_MSI_IsReady+0x16>
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e000      	b.n	8001c4e <LL_RCC_MSI_IsReady+0x18>
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr

08001c56 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	d101      	bne.n	8001c6c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e000      	b.n	8001c6e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc80      	pop	{r7}
 8001c74:	4770      	bx	lr

08001c76 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c98:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	021b      	lsls	r3, r3, #8
 8001cba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	604b      	str	r3, [r1, #4]
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr

08001ccc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f023 0203 	bic.w	r2, r3, #3
 8001cde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	608b      	str	r3, [r1, #8]
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr

08001cf2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f003 030c 	and.w	r3, r3, #12
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	608b      	str	r3, [r1, #8]
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr

08001d2e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d64:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d68:	f023 020f 	bic.w	r2, r3, #15
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	091b      	lsrs	r3, r3, #4
 8001d70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d74:	4313      	orrs	r3, r2
 8001d76:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr

08001d84 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	608b      	str	r3, [r1, #8]
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr

08001daa <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	608b      	str	r3, [r1, #8]
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr

08001dd0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr

08001de6 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001df2:	011b      	lsls	r3, r3, #4
 8001df4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr

08001e00 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e12:	6013      	str	r3, [r2, #0]
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr

08001e1c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e2e:	6013      	str	r3, [r2, #0]
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr

08001e38 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e4a:	d101      	bne.n	8001e50 <LL_RCC_PLL_IsReady+0x18>
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e000      	b.n	8001e52 <LL_RCC_PLL_IsReady+0x1a>
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr

08001e5a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	0a1b      	lsrs	r3, r3, #8
 8001e66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr

08001e72 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr

08001e88 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc80      	pop	{r7}
 8001e9c:	4770      	bx	lr

08001e9e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	f003 0303 	and.w	r3, r3, #3
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr

08001eb4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec6:	d101      	bne.n	8001ecc <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e000      	b.n	8001ece <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr

08001ed6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ede:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001eea:	d101      	bne.n	8001ef0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001eec:	2301      	movs	r3, #1
 8001eee:	e000      	b.n	8001ef2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr

08001efa <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f02:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f0e:	d101      	bne.n	8001f14 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001f10:	2301      	movs	r3, #1
 8001f12:	e000      	b.n	8001f16 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr

08001f1e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f30:	d101      	bne.n	8001f36 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr

08001f40 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f52:	d101      	bne.n	8001f58 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001f54:	2301      	movs	r3, #1
 8001f56:	e000      	b.n	8001f5a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr
	...

08001f64 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b088      	sub	sp, #32
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e36f      	b.n	8002656 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f76:	f7ff febc 	bl	8001cf2 <LL_RCC_GetSysClkSource>
 8001f7a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f7c:	f7ff ff8f 	bl	8001e9e <LL_RCC_PLL_GetMainSource>
 8001f80:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0320 	and.w	r3, r3, #32
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 80c4 	beq.w	8002118 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d005      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x3e>
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	2b0c      	cmp	r3, #12
 8001f9a:	d176      	bne.n	800208a <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d173      	bne.n	800208a <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e353      	b.n	8002656 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0308 	and.w	r3, r3, #8
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d005      	beq.n	8001fcc <HAL_RCC_OscConfig+0x68>
 8001fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fca:	e006      	b.n	8001fda <HAL_RCC_OscConfig+0x76>
 8001fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fd4:	091b      	lsrs	r3, r3, #4
 8001fd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d222      	bcs.n	8002024 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 fd36 	bl	8002a54 <RCC_SetFlashLatencyFromMSIRange>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e331      	b.n	8002656 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ffc:	f043 0308 	orr.w	r3, r3, #8
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002010:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002014:	4313      	orrs	r3, r2
 8002016:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff fe41 	bl	8001ca4 <LL_RCC_MSI_SetCalibTrimming>
 8002022:	e021      	b.n	8002068 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800202e:	f043 0308 	orr.w	r3, r3, #8
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002042:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002046:	4313      	orrs	r3, r2
 8002048:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff fe28 	bl	8001ca4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002058:	4618      	mov	r0, r3
 800205a:	f000 fcfb 	bl	8002a54 <RCC_SetFlashLatencyFromMSIRange>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e2f6      	b.n	8002656 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002068:	f000 fce0 	bl	8002a2c <HAL_RCC_GetHCLKFreq>
 800206c:	4603      	mov	r3, r0
 800206e:	4aa7      	ldr	r2, [pc, #668]	; (800230c <HAL_RCC_OscConfig+0x3a8>)
 8002070:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002072:	4ba7      	ldr	r3, [pc, #668]	; (8002310 <HAL_RCC_OscConfig+0x3ac>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe fd58 	bl	8000b2c <HAL_InitTick>
 800207c:	4603      	mov	r3, r0
 800207e:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002080:	7cfb      	ldrb	r3, [r7, #19]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d047      	beq.n	8002116 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002086:	7cfb      	ldrb	r3, [r7, #19]
 8002088:	e2e5      	b.n	8002656 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d02c      	beq.n	80020ec <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002092:	f7ff fdb4 	bl	8001bfe <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002096:	f7fe fd95 	bl	8000bc4 <HAL_GetTick>
 800209a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800209e:	f7fe fd91 	bl	8000bc4 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e2d2      	b.n	8002656 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80020b0:	f7ff fdc1 	bl	8001c36 <LL_RCC_MSI_IsReady>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f1      	beq.n	800209e <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020c4:	f043 0308 	orr.w	r3, r3, #8
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020dc:	4313      	orrs	r3, r2
 80020de:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff fddd 	bl	8001ca4 <LL_RCC_MSI_SetCalibTrimming>
 80020ea:	e015      	b.n	8002118 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020ec:	f7ff fd95 	bl	8001c1a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020f0:	f7fe fd68 	bl	8000bc4 <HAL_GetTick>
 80020f4:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020f8:	f7fe fd64 	bl	8000bc4 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e2a5      	b.n	8002656 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800210a:	f7ff fd94 	bl	8001c36 <LL_RCC_MSI_IsReady>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1f1      	bne.n	80020f8 <HAL_RCC_OscConfig+0x194>
 8002114:	e000      	b.n	8002118 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002116:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b00      	cmp	r3, #0
 8002122:	d058      	beq.n	80021d6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	2b08      	cmp	r3, #8
 8002128:	d005      	beq.n	8002136 <HAL_RCC_OscConfig+0x1d2>
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	2b0c      	cmp	r3, #12
 800212e:	d108      	bne.n	8002142 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	2b03      	cmp	r3, #3
 8002134:	d105      	bne.n	8002142 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d14b      	bne.n	80021d6 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e289      	b.n	8002656 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002154:	4313      	orrs	r3, r2
 8002156:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002160:	d102      	bne.n	8002168 <HAL_RCC_OscConfig+0x204>
 8002162:	f7ff fc9c 	bl	8001a9e <LL_RCC_HSE_Enable>
 8002166:	e00d      	b.n	8002184 <HAL_RCC_OscConfig+0x220>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002170:	d104      	bne.n	800217c <HAL_RCC_OscConfig+0x218>
 8002172:	f7ff fc67 	bl	8001a44 <LL_RCC_HSE_EnableTcxo>
 8002176:	f7ff fc92 	bl	8001a9e <LL_RCC_HSE_Enable>
 800217a:	e003      	b.n	8002184 <HAL_RCC_OscConfig+0x220>
 800217c:	f7ff fc9d 	bl	8001aba <LL_RCC_HSE_Disable>
 8002180:	f7ff fc6e 	bl	8001a60 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d012      	beq.n	80021b2 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218c:	f7fe fd1a 	bl	8000bc4 <HAL_GetTick>
 8002190:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002194:	f7fe fd16 	bl	8000bc4 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b64      	cmp	r3, #100	; 0x64
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e257      	b.n	8002656 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80021a6:	f7ff fc96 	bl	8001ad6 <LL_RCC_HSE_IsReady>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0f1      	beq.n	8002194 <HAL_RCC_OscConfig+0x230>
 80021b0:	e011      	b.n	80021d6 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b2:	f7fe fd07 	bl	8000bc4 <HAL_GetTick>
 80021b6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021ba:	f7fe fd03 	bl	8000bc4 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b64      	cmp	r3, #100	; 0x64
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e244      	b.n	8002656 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80021cc:	f7ff fc83 	bl	8001ad6 <LL_RCC_HSE_IsReady>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f1      	bne.n	80021ba <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d046      	beq.n	8002270 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d005      	beq.n	80021f4 <HAL_RCC_OscConfig+0x290>
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	2b0c      	cmp	r3, #12
 80021ec:	d10e      	bne.n	800220c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d10b      	bne.n	800220c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e22a      	b.n	8002656 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff fca4 	bl	8001b52 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800220a:	e031      	b.n	8002270 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d019      	beq.n	8002248 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002214:	f7ff fc70 	bl	8001af8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002218:	f7fe fcd4 	bl	8000bc4 <HAL_GetTick>
 800221c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002220:	f7fe fcd0 	bl	8000bc4 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e211      	b.n	8002656 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002232:	f7ff fc7d 	bl	8001b30 <LL_RCC_HSI_IsReady>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f1      	beq.n	8002220 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff fc86 	bl	8001b52 <LL_RCC_HSI_SetCalibTrimming>
 8002246:	e013      	b.n	8002270 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002248:	f7ff fc64 	bl	8001b14 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224c:	f7fe fcba 	bl	8000bc4 <HAL_GetTick>
 8002250:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002254:	f7fe fcb6 	bl	8000bc4 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e1f7      	b.n	8002656 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002266:	f7ff fc63 	bl	8001b30 <LL_RCC_HSI_IsReady>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1f1      	bne.n	8002254 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0308 	and.w	r3, r3, #8
 8002278:	2b00      	cmp	r3, #0
 800227a:	d06e      	beq.n	800235a <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d056      	beq.n	8002332 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002288:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800228c:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69da      	ldr	r2, [r3, #28]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f003 0310 	and.w	r3, r3, #16
 8002298:	429a      	cmp	r2, r3
 800229a:	d031      	beq.n	8002300 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d006      	beq.n	80022b4 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e1d0      	b.n	8002656 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d013      	beq.n	80022e6 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80022be:	f7ff fc7d 	bl	8001bbc <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022c2:	f7fe fc7f 	bl	8000bc4 <HAL_GetTick>
 80022c6:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ca:	f7fe fc7b 	bl	8000bc4 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b11      	cmp	r3, #17
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e1bc      	b.n	8002656 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80022dc:	f7ff fc7e 	bl	8001bdc <LL_RCC_LSI_IsReady>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f1      	bne.n	80022ca <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80022e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ee:	f023 0210 	bic.w	r2, r3, #16
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022fa:	4313      	orrs	r3, r2
 80022fc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002300:	f7ff fc4c 	bl	8001b9c <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002304:	f7fe fc5e 	bl	8000bc4 <HAL_GetTick>
 8002308:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800230a:	e00c      	b.n	8002326 <HAL_RCC_OscConfig+0x3c2>
 800230c:	20000000 	.word	0x20000000
 8002310:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002314:	f7fe fc56 	bl	8000bc4 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b11      	cmp	r3, #17
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e197      	b.n	8002656 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002326:	f7ff fc59 	bl	8001bdc <LL_RCC_LSI_IsReady>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f1      	beq.n	8002314 <HAL_RCC_OscConfig+0x3b0>
 8002330:	e013      	b.n	800235a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002332:	f7ff fc43 	bl	8001bbc <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002336:	f7fe fc45 	bl	8000bc4 <HAL_GetTick>
 800233a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800233e:	f7fe fc41 	bl	8000bc4 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b11      	cmp	r3, #17
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e182      	b.n	8002656 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002350:	f7ff fc44 	bl	8001bdc <LL_RCC_LSI_IsReady>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f1      	bne.n	800233e <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0304 	and.w	r3, r3, #4
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 80d8 	beq.w	8002518 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002368:	f7ff fb5a 	bl	8001a20 <LL_PWR_IsEnabledBkUpAccess>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d113      	bne.n	800239a <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002372:	f7ff fb23 	bl	80019bc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002376:	f7fe fc25 	bl	8000bc4 <HAL_GetTick>
 800237a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800237e:	f7fe fc21 	bl	8000bc4 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e162      	b.n	8002656 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002390:	f7ff fb46 	bl	8001a20 <LL_PWR_IsEnabledBkUpAccess>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f1      	beq.n	800237e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d07b      	beq.n	800249a <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	2b85      	cmp	r3, #133	; 0x85
 80023a8:	d003      	beq.n	80023b2 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	2b05      	cmp	r3, #5
 80023b0:	d109      	bne.n	80023c6 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80023b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023be:	f043 0304 	orr.w	r3, r3, #4
 80023c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c6:	f7fe fbfd 	bl	8000bc4 <HAL_GetTick>
 80023ca:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80023cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80023e0:	e00a      	b.n	80023f8 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023e2:	f7fe fbef 	bl	8000bc4 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e12e      	b.n	8002656 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80023f8:	f7ff fbbf 	bl	8001b7a <LL_RCC_LSE_IsReady>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0ef      	beq.n	80023e2 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	2b81      	cmp	r3, #129	; 0x81
 8002408:	d003      	beq.n	8002412 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	2b85      	cmp	r3, #133	; 0x85
 8002410:	d121      	bne.n	8002456 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002412:	f7fe fbd7 	bl	8000bc4 <HAL_GetTick>
 8002416:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800241c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002420:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800242c:	e00a      	b.n	8002444 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242e:	f7fe fbc9 	bl	8000bc4 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	f241 3288 	movw	r2, #5000	; 0x1388
 800243c:	4293      	cmp	r3, r2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e108      	b.n	8002656 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0ec      	beq.n	800242e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002454:	e060      	b.n	8002518 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002456:	f7fe fbb5 	bl	8000bc4 <HAL_GetTick>
 800245a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800245c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002464:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002468:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800246c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002470:	e00a      	b.n	8002488 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002472:	f7fe fba7 	bl	8000bc4 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002480:	4293      	cmp	r3, r2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e0e6      	b.n	8002656 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800248c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002490:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1ec      	bne.n	8002472 <HAL_RCC_OscConfig+0x50e>
 8002498:	e03e      	b.n	8002518 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249a:	f7fe fb93 	bl	8000bc4 <HAL_GetTick>
 800249e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80024a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80024b4:	e00a      	b.n	80024cc <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b6:	f7fe fb85 	bl	8000bc4 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e0c4      	b.n	8002656 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80024cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1ec      	bne.n	80024b6 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024dc:	f7fe fb72 	bl	8000bc4 <HAL_GetTick>
 80024e0:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80024e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024ee:	f023 0301 	bic.w	r3, r3, #1
 80024f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80024f6:	e00a      	b.n	800250e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f8:	f7fe fb64 	bl	8000bc4 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	f241 3288 	movw	r2, #5000	; 0x1388
 8002506:	4293      	cmp	r3, r2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e0a3      	b.n	8002656 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800250e:	f7ff fb34 	bl	8001b7a <LL_RCC_LSE_IsReady>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1ef      	bne.n	80024f8 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 8099 	beq.w	8002654 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	2b0c      	cmp	r3, #12
 8002526:	d06c      	beq.n	8002602 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	2b02      	cmp	r3, #2
 800252e:	d14b      	bne.n	80025c8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002530:	f7ff fc74 	bl	8001e1c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002534:	f7fe fb46 	bl	8000bc4 <HAL_GetTick>
 8002538:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253c:	f7fe fb42 	bl	8000bc4 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b0a      	cmp	r3, #10
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e083      	b.n	8002656 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800254e:	f7ff fc73 	bl	8001e38 <LL_RCC_PLL_IsReady>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1f1      	bne.n	800253c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	4b40      	ldr	r3, [pc, #256]	; (8002660 <HAL_RCC_OscConfig+0x6fc>)
 8002560:	4013      	ands	r3, r2
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800256a:	4311      	orrs	r1, r2
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002570:	0212      	lsls	r2, r2, #8
 8002572:	4311      	orrs	r1, r2
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002578:	4311      	orrs	r1, r2
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800257e:	4311      	orrs	r1, r2
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002584:	430a      	orrs	r2, r1
 8002586:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800258a:	4313      	orrs	r3, r2
 800258c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800258e:	f7ff fc37 	bl	8001e00 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800259c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a2:	f7fe fb0f 	bl	8000bc4 <HAL_GetTick>
 80025a6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025aa:	f7fe fb0b 	bl	8000bc4 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b0a      	cmp	r3, #10
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e04c      	b.n	8002656 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80025bc:	f7ff fc3c 	bl	8001e38 <LL_RCC_PLL_IsReady>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0f1      	beq.n	80025aa <HAL_RCC_OscConfig+0x646>
 80025c6:	e045      	b.n	8002654 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c8:	f7ff fc28 	bl	8001e1c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025cc:	f7fe fafa 	bl	8000bc4 <HAL_GetTick>
 80025d0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d4:	f7fe faf6 	bl	8000bc4 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b0a      	cmp	r3, #10
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e037      	b.n	8002656 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80025e6:	f7ff fc27 	bl	8001e38 <LL_RCC_PLL_IsReady>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1f1      	bne.n	80025d4 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80025f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f4:	68da      	ldr	r2, [r3, #12]
 80025f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025fa:	4b1a      	ldr	r3, [pc, #104]	; (8002664 <HAL_RCC_OscConfig+0x700>)
 80025fc:	4013      	ands	r3, r2
 80025fe:	60cb      	str	r3, [r1, #12]
 8002600:	e028      	b.n	8002654 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e023      	b.n	8002656 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800260e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	f003 0203 	and.w	r2, r3, #3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002620:	429a      	cmp	r2, r3
 8002622:	d115      	bne.n	8002650 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800262e:	429a      	cmp	r2, r3
 8002630:	d10e      	bne.n	8002650 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263c:	021b      	lsls	r3, r3, #8
 800263e:	429a      	cmp	r2, r3
 8002640:	d106      	bne.n	8002650 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264c:	429a      	cmp	r2, r3
 800264e:	d001      	beq.n	8002654 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e000      	b.n	8002656 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3720      	adds	r7, #32
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	11c1808c 	.word	0x11c1808c
 8002664:	eefefffc 	.word	0xeefefffc

08002668 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e12c      	b.n	80028d6 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800267c:	4b98      	ldr	r3, [pc, #608]	; (80028e0 <HAL_RCC_ClockConfig+0x278>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d91b      	bls.n	80026c2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268a:	4b95      	ldr	r3, [pc, #596]	; (80028e0 <HAL_RCC_ClockConfig+0x278>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f023 0207 	bic.w	r2, r3, #7
 8002692:	4993      	ldr	r1, [pc, #588]	; (80028e0 <HAL_RCC_ClockConfig+0x278>)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	4313      	orrs	r3, r2
 8002698:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800269a:	f7fe fa93 	bl	8000bc4 <HAL_GetTick>
 800269e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80026a2:	f7fe fa8f 	bl	8000bc4 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e110      	b.n	80028d6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b4:	4b8a      	ldr	r3, [pc, #552]	; (80028e0 <HAL_RCC_ClockConfig+0x278>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d1ef      	bne.n	80026a2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d016      	beq.n	80026fc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff fb18 	bl	8001d08 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80026d8:	f7fe fa74 	bl	8000bc4 <HAL_GetTick>
 80026dc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026e0:	f7fe fa70 	bl	8000bc4 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e0f1      	b.n	80028d6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80026f2:	f7ff fbdf 	bl	8001eb4 <LL_RCC_IsActiveFlag_HPRE>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0f1      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0320 	and.w	r3, r3, #32
 8002704:	2b00      	cmp	r3, #0
 8002706:	d016      	beq.n	8002736 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff fb0e 	bl	8001d2e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002712:	f7fe fa57 	bl	8000bc4 <HAL_GetTick>
 8002716:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002718:	e008      	b.n	800272c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800271a:	f7fe fa53 	bl	8000bc4 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e0d4      	b.n	80028d6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800272c:	f7ff fbd3 	bl	8001ed6 <LL_RCC_IsActiveFlag_C2HPRE>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f1      	beq.n	800271a <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273e:	2b00      	cmp	r3, #0
 8002740:	d016      	beq.n	8002770 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff fb06 	bl	8001d58 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800274c:	f7fe fa3a 	bl	8000bc4 <HAL_GetTick>
 8002750:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002752:	e008      	b.n	8002766 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002754:	f7fe fa36 	bl	8000bc4 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e0b7      	b.n	80028d6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002766:	f7ff fbc8 	bl	8001efa <LL_RCC_IsActiveFlag_SHDHPRE>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f1      	beq.n	8002754 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	d016      	beq.n	80027aa <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff faff 	bl	8001d84 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002786:	f7fe fa1d 	bl	8000bc4 <HAL_GetTick>
 800278a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800278c:	e008      	b.n	80027a0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800278e:	f7fe fa19 	bl	8000bc4 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e09a      	b.n	80028d6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80027a0:	f7ff fbbd 	bl	8001f1e <LL_RCC_IsActiveFlag_PPRE1>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f1      	beq.n	800278e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d017      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff faf4 	bl	8001daa <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80027c2:	f7fe f9ff 	bl	8000bc4 <HAL_GetTick>
 80027c6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027ca:	f7fe f9fb 	bl	8000bc4 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e07c      	b.n	80028d6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80027dc:	f7ff fbb0 	bl	8001f40 <LL_RCC_IsActiveFlag_PPRE2>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0f1      	beq.n	80027ca <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d043      	beq.n	800287a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d106      	bne.n	8002808 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80027fa:	f7ff f96c 	bl	8001ad6 <LL_RCC_HSE_IsReady>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d11e      	bne.n	8002842 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e066      	b.n	80028d6 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2b03      	cmp	r3, #3
 800280e:	d106      	bne.n	800281e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002810:	f7ff fb12 	bl	8001e38 <LL_RCC_PLL_IsReady>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d113      	bne.n	8002842 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e05b      	b.n	80028d6 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d106      	bne.n	8002834 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002826:	f7ff fa06 	bl	8001c36 <LL_RCC_MSI_IsReady>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d108      	bne.n	8002842 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e050      	b.n	80028d6 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002834:	f7ff f97c 	bl	8001b30 <LL_RCC_HSI_IsReady>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e049      	b.n	80028d6 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff fa40 	bl	8001ccc <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800284c:	f7fe f9ba 	bl	8000bc4 <HAL_GetTick>
 8002850:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002852:	e00a      	b.n	800286a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002854:	f7fe f9b6 	bl	8000bc4 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002862:	4293      	cmp	r3, r2
 8002864:	d901      	bls.n	800286a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e035      	b.n	80028d6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286a:	f7ff fa42 	bl	8001cf2 <LL_RCC_GetSysClkSource>
 800286e:	4602      	mov	r2, r0
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	429a      	cmp	r2, r3
 8002878:	d1ec      	bne.n	8002854 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800287a:	4b19      	ldr	r3, [pc, #100]	; (80028e0 <HAL_RCC_ClockConfig+0x278>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	429a      	cmp	r2, r3
 8002886:	d21b      	bcs.n	80028c0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002888:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <HAL_RCC_ClockConfig+0x278>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f023 0207 	bic.w	r2, r3, #7
 8002890:	4913      	ldr	r1, [pc, #76]	; (80028e0 <HAL_RCC_ClockConfig+0x278>)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	4313      	orrs	r3, r2
 8002896:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002898:	f7fe f994 	bl	8000bc4 <HAL_GetTick>
 800289c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80028a0:	f7fe f990 	bl	8000bc4 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e011      	b.n	80028d6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b2:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <HAL_RCC_ClockConfig+0x278>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d1ef      	bne.n	80028a0 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80028c0:	f000 f8b4 	bl	8002a2c <HAL_RCC_GetHCLKFreq>
 80028c4:	4603      	mov	r3, r0
 80028c6:	4a07      	ldr	r2, [pc, #28]	; (80028e4 <HAL_RCC_ClockConfig+0x27c>)
 80028c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80028ca:	4b07      	ldr	r3, [pc, #28]	; (80028e8 <HAL_RCC_ClockConfig+0x280>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fe f92c 	bl	8000b2c <HAL_InitTick>
 80028d4:	4603      	mov	r3, r0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	58004000 	.word	0x58004000
 80028e4:	20000000 	.word	0x20000000
 80028e8:	20000004 	.word	0x20000004

080028ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028ec:	b590      	push	{r4, r7, lr}
 80028ee:	b087      	sub	sp, #28
 80028f0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028fa:	f7ff f9fa 	bl	8001cf2 <LL_RCC_GetSysClkSource>
 80028fe:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002900:	f7ff facd 	bl	8001e9e <LL_RCC_PLL_GetMainSource>
 8002904:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d005      	beq.n	8002918 <HAL_RCC_GetSysClockFreq+0x2c>
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2b0c      	cmp	r3, #12
 8002910:	d139      	bne.n	8002986 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d136      	bne.n	8002986 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002918:	f7ff f99d 	bl	8001c56 <LL_RCC_MSI_IsEnabledRangeSelect>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d115      	bne.n	800294e <HAL_RCC_GetSysClockFreq+0x62>
 8002922:	f7ff f998 	bl	8001c56 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002926:	4603      	mov	r3, r0
 8002928:	2b01      	cmp	r3, #1
 800292a:	d106      	bne.n	800293a <HAL_RCC_GetSysClockFreq+0x4e>
 800292c:	f7ff f9a3 	bl	8001c76 <LL_RCC_MSI_GetRange>
 8002930:	4603      	mov	r3, r0
 8002932:	0a1b      	lsrs	r3, r3, #8
 8002934:	f003 030f 	and.w	r3, r3, #15
 8002938:	e005      	b.n	8002946 <HAL_RCC_GetSysClockFreq+0x5a>
 800293a:	f7ff f9a7 	bl	8001c8c <LL_RCC_MSI_GetRangeAfterStandby>
 800293e:	4603      	mov	r3, r0
 8002940:	0a1b      	lsrs	r3, r3, #8
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	4a36      	ldr	r2, [pc, #216]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x134>)
 8002948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800294c:	e014      	b.n	8002978 <HAL_RCC_GetSysClockFreq+0x8c>
 800294e:	f7ff f982 	bl	8001c56 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002952:	4603      	mov	r3, r0
 8002954:	2b01      	cmp	r3, #1
 8002956:	d106      	bne.n	8002966 <HAL_RCC_GetSysClockFreq+0x7a>
 8002958:	f7ff f98d 	bl	8001c76 <LL_RCC_MSI_GetRange>
 800295c:	4603      	mov	r3, r0
 800295e:	091b      	lsrs	r3, r3, #4
 8002960:	f003 030f 	and.w	r3, r3, #15
 8002964:	e005      	b.n	8002972 <HAL_RCC_GetSysClockFreq+0x86>
 8002966:	f7ff f991 	bl	8001c8c <LL_RCC_MSI_GetRangeAfterStandby>
 800296a:	4603      	mov	r3, r0
 800296c:	091b      	lsrs	r3, r3, #4
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	4a2b      	ldr	r2, [pc, #172]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x134>)
 8002974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002978:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d115      	bne.n	80029ac <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002984:	e012      	b.n	80029ac <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	2b04      	cmp	r3, #4
 800298a:	d102      	bne.n	8002992 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800298c:	4b25      	ldr	r3, [pc, #148]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x138>)
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	e00c      	b.n	80029ac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	2b08      	cmp	r3, #8
 8002996:	d109      	bne.n	80029ac <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002998:	f7ff f870 	bl	8001a7c <LL_RCC_HSE_IsEnabledDiv2>
 800299c:	4603      	mov	r3, r0
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d102      	bne.n	80029a8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80029a2:	4b20      	ldr	r3, [pc, #128]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x138>)
 80029a4:	617b      	str	r3, [r7, #20]
 80029a6:	e001      	b.n	80029ac <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80029a8:	4b1f      	ldr	r3, [pc, #124]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x13c>)
 80029aa:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029ac:	f7ff f9a1 	bl	8001cf2 <LL_RCC_GetSysClkSource>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b0c      	cmp	r3, #12
 80029b4:	d12f      	bne.n	8002a16 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80029b6:	f7ff fa72 	bl	8001e9e <LL_RCC_PLL_GetMainSource>
 80029ba:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d003      	beq.n	80029ca <HAL_RCC_GetSysClockFreq+0xde>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	d003      	beq.n	80029d0 <HAL_RCC_GetSysClockFreq+0xe4>
 80029c8:	e00d      	b.n	80029e6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80029ca:	4b16      	ldr	r3, [pc, #88]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x138>)
 80029cc:	60fb      	str	r3, [r7, #12]
        break;
 80029ce:	e00d      	b.n	80029ec <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80029d0:	f7ff f854 	bl	8001a7c <LL_RCC_HSE_IsEnabledDiv2>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d102      	bne.n	80029e0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80029da:	4b12      	ldr	r3, [pc, #72]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x138>)
 80029dc:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80029de:	e005      	b.n	80029ec <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80029e0:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x13c>)
 80029e2:	60fb      	str	r3, [r7, #12]
        break;
 80029e4:	e002      	b.n	80029ec <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	60fb      	str	r3, [r7, #12]
        break;
 80029ea:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80029ec:	f7ff fa35 	bl	8001e5a <LL_RCC_PLL_GetN>
 80029f0:	4602      	mov	r2, r0
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	fb03 f402 	mul.w	r4, r3, r2
 80029f8:	f7ff fa46 	bl	8001e88 <LL_RCC_PLL_GetDivider>
 80029fc:	4603      	mov	r3, r0
 80029fe:	091b      	lsrs	r3, r3, #4
 8002a00:	3301      	adds	r3, #1
 8002a02:	fbb4 f4f3 	udiv	r4, r4, r3
 8002a06:	f7ff fa34 	bl	8001e72 <LL_RCC_PLL_GetR>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	0f5b      	lsrs	r3, r3, #29
 8002a0e:	3301      	adds	r3, #1
 8002a10:	fbb4 f3f3 	udiv	r3, r4, r3
 8002a14:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002a16:	697b      	ldr	r3, [r7, #20]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	371c      	adds	r7, #28
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd90      	pop	{r4, r7, pc}
 8002a20:	08002c84 	.word	0x08002c84
 8002a24:	00f42400 	.word	0x00f42400
 8002a28:	01e84800 	.word	0x01e84800

08002a2c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a2c:	b598      	push	{r3, r4, r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002a30:	f7ff ff5c 	bl	80028ec <HAL_RCC_GetSysClockFreq>
 8002a34:	4604      	mov	r4, r0
 8002a36:	f7ff f9cb 	bl	8001dd0 <LL_RCC_GetAHBPrescaler>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	091b      	lsrs	r3, r3, #4
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	4a03      	ldr	r2, [pc, #12]	; (8002a50 <HAL_RCC_GetHCLKFreq+0x24>)
 8002a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a48:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	bd98      	pop	{r3, r4, r7, pc}
 8002a50:	08002c44 	.word	0x08002c44

08002a54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002a54:	b590      	push	{r4, r7, lr}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	091b      	lsrs	r3, r3, #4
 8002a60:	f003 030f 	and.w	r3, r3, #15
 8002a64:	4a10      	ldr	r2, [pc, #64]	; (8002aa8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a6a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002a6c:	f7ff f9bb 	bl	8001de6 <LL_RCC_GetAHB3Prescaler>
 8002a70:	4603      	mov	r3, r0
 8002a72:	091b      	lsrs	r3, r3, #4
 8002a74:	f003 030f 	and.w	r3, r3, #15
 8002a78:	4a0c      	ldr	r2, [pc, #48]	; (8002aac <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a84:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	4a09      	ldr	r2, [pc, #36]	; (8002ab0 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8e:	0c9c      	lsrs	r4, r3, #18
 8002a90:	f7fe ffb0 	bl	80019f4 <HAL_PWREx_GetVoltageRange>
 8002a94:	4603      	mov	r3, r0
 8002a96:	4619      	mov	r1, r3
 8002a98:	4620      	mov	r0, r4
 8002a9a:	f000 f80b 	bl	8002ab4 <RCC_SetFlashLatency>
 8002a9e:	4603      	mov	r3, r0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3714      	adds	r7, #20
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd90      	pop	{r4, r7, pc}
 8002aa8:	08002c84 	.word	0x08002c84
 8002aac:	08002c44 	.word	0x08002c44
 8002ab0:	431bde83 	.word	0x431bde83

08002ab4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08e      	sub	sp, #56	; 0x38
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002abe:	4a3a      	ldr	r2, [pc, #232]	; (8002ba8 <RCC_SetFlashLatency+0xf4>)
 8002ac0:	f107 0320 	add.w	r3, r7, #32
 8002ac4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ac8:	6018      	str	r0, [r3, #0]
 8002aca:	3304      	adds	r3, #4
 8002acc:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002ace:	4a37      	ldr	r2, [pc, #220]	; (8002bac <RCC_SetFlashLatency+0xf8>)
 8002ad0:	f107 0318 	add.w	r3, r7, #24
 8002ad4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ad8:	6018      	str	r0, [r3, #0]
 8002ada:	3304      	adds	r3, #4
 8002adc:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002ade:	4a34      	ldr	r2, [pc, #208]	; (8002bb0 <RCC_SetFlashLatency+0xfc>)
 8002ae0:	f107 030c 	add.w	r3, r7, #12
 8002ae4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ae6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002aea:	2300      	movs	r3, #0
 8002aec:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002af4:	d11b      	bne.n	8002b2e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002af6:	2300      	movs	r3, #0
 8002af8:	633b      	str	r3, [r7, #48]	; 0x30
 8002afa:	e014      	b.n	8002b26 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	3338      	adds	r3, #56	; 0x38
 8002b02:	443b      	add	r3, r7
 8002b04:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d807      	bhi.n	8002b20 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	3338      	adds	r3, #56	; 0x38
 8002b16:	443b      	add	r3, r7
 8002b18:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002b1c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b1e:	e021      	b.n	8002b64 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b22:	3301      	adds	r3, #1
 8002b24:	633b      	str	r3, [r7, #48]	; 0x30
 8002b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d9e7      	bls.n	8002afc <RCC_SetFlashLatency+0x48>
 8002b2c:	e01a      	b.n	8002b64 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002b2e:	2300      	movs	r3, #0
 8002b30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b32:	e014      	b.n	8002b5e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	3338      	adds	r3, #56	; 0x38
 8002b3a:	443b      	add	r3, r7
 8002b3c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002b40:	461a      	mov	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d807      	bhi.n	8002b58 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	3338      	adds	r3, #56	; 0x38
 8002b4e:	443b      	add	r3, r7
 8002b50:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002b54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b56:	e005      	b.n	8002b64 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d9e7      	bls.n	8002b34 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b64:	4b13      	ldr	r3, [pc, #76]	; (8002bb4 <RCC_SetFlashLatency+0x100>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f023 0207 	bic.w	r2, r3, #7
 8002b6c:	4911      	ldr	r1, [pc, #68]	; (8002bb4 <RCC_SetFlashLatency+0x100>)
 8002b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b70:	4313      	orrs	r3, r2
 8002b72:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002b74:	f7fe f826 	bl	8000bc4 <HAL_GetTick>
 8002b78:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002b7a:	e008      	b.n	8002b8e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002b7c:	f7fe f822 	bl	8000bc4 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e007      	b.n	8002b9e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002b8e:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <RCC_SetFlashLatency+0x100>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d1ef      	bne.n	8002b7c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3738      	adds	r7, #56	; 0x38
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	08002c28 	.word	0x08002c28
 8002bac:	08002c30 	.word	0x08002c30
 8002bb0:	08002c38 	.word	0x08002c38
 8002bb4:	58004000 	.word	0x58004000

08002bb8 <memset>:
 8002bb8:	4402      	add	r2, r0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d100      	bne.n	8002bc2 <memset+0xa>
 8002bc0:	4770      	bx	lr
 8002bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8002bc6:	e7f9      	b.n	8002bbc <memset+0x4>

08002bc8 <__libc_init_array>:
 8002bc8:	b570      	push	{r4, r5, r6, lr}
 8002bca:	4d0d      	ldr	r5, [pc, #52]	; (8002c00 <__libc_init_array+0x38>)
 8002bcc:	4c0d      	ldr	r4, [pc, #52]	; (8002c04 <__libc_init_array+0x3c>)
 8002bce:	1b64      	subs	r4, r4, r5
 8002bd0:	10a4      	asrs	r4, r4, #2
 8002bd2:	2600      	movs	r6, #0
 8002bd4:	42a6      	cmp	r6, r4
 8002bd6:	d109      	bne.n	8002bec <__libc_init_array+0x24>
 8002bd8:	4d0b      	ldr	r5, [pc, #44]	; (8002c08 <__libc_init_array+0x40>)
 8002bda:	4c0c      	ldr	r4, [pc, #48]	; (8002c0c <__libc_init_array+0x44>)
 8002bdc:	f000 f818 	bl	8002c10 <_init>
 8002be0:	1b64      	subs	r4, r4, r5
 8002be2:	10a4      	asrs	r4, r4, #2
 8002be4:	2600      	movs	r6, #0
 8002be6:	42a6      	cmp	r6, r4
 8002be8:	d105      	bne.n	8002bf6 <__libc_init_array+0x2e>
 8002bea:	bd70      	pop	{r4, r5, r6, pc}
 8002bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bf0:	4798      	blx	r3
 8002bf2:	3601      	adds	r6, #1
 8002bf4:	e7ee      	b.n	8002bd4 <__libc_init_array+0xc>
 8002bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bfa:	4798      	blx	r3
 8002bfc:	3601      	adds	r6, #1
 8002bfe:	e7f2      	b.n	8002be6 <__libc_init_array+0x1e>
 8002c00:	08002cc4 	.word	0x08002cc4
 8002c04:	08002cc4 	.word	0x08002cc4
 8002c08:	08002cc4 	.word	0x08002cc4
 8002c0c:	08002cc8 	.word	0x08002cc8

08002c10 <_init>:
 8002c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c12:	bf00      	nop
 8002c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c16:	bc08      	pop	{r3}
 8002c18:	469e      	mov	lr, r3
 8002c1a:	4770      	bx	lr

08002c1c <_fini>:
 8002c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c1e:	bf00      	nop
 8002c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c22:	bc08      	pop	{r3}
 8002c24:	469e      	mov	lr, r3
 8002c26:	4770      	bx	lr
